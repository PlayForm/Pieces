/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import type { EmbeddedModelSchema } from "./EmbeddedModelSchema.tsx";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
} from "./EmbeddedModelSchema.tsx";
import type { TrackedSummaryTotals } from "./TrackedSummaryTotals.tsx";
import {
	TrackedSummaryTotalsFromJSON,
	TrackedSummaryTotalsToJSON,
} from "./TrackedSummaryTotals.tsx";

/**
 * This will return metadata (total materials) in your pieces drive.
 * @export
 * @interface OSServerMetadata
 */
export interface OSServerMetadata {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof OSServerMetadata
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {TrackedSummaryTotals}
	 * @memberof OSServerMetadata
	 */
	totals?: TrackedSummaryTotals;
}

/**
 * Check if a given object implements the OSServerMetadata interface.
 */
export function instanceOfOSServerMetadata(_value: object): boolean {
	const isInstance = true;

	return isInstance;
}

export function OSServerMetadataFromJSON(json: any): OSServerMetadata {
	return OSServerMetadataFromJSONTyped(json, false);
}

export function OSServerMetadataFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): OSServerMetadata {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		totals: exists(json, "totals")
			? TrackedSummaryTotalsFromJSON(json["totals"])
			: undefined,
	};
}

export function OSServerMetadataToJSON(value?: OSServerMetadata | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		totals: TrackedSummaryTotalsToJSON(value.totals),
	};
}
