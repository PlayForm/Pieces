/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import type { EmbeddedModelSchema } from "./EmbeddedModelSchema.tsx";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
} from "./EmbeddedModelSchema.tsx";
import type { QGPTConversation } from "./QGPTConversation.tsx";
import {
	QGPTConversationFromJSON,
	QGPTConversationToJSON,
} from "./QGPTConversation.tsx";
import type { Seed } from "./Seed.tsx";
import { SeedFromJSON, SeedToJSON } from "./Seed.tsx";

/**
 * This is used for /qgpt/persons/related.
 *
 * will accept a seed, or conversation all optionally.
 *
 * @export
 * @interface QGPTPersonsRelatedInput
 */
export interface QGPTPersonsRelatedInput {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof QGPTPersonsRelatedInput
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {Seed}
	 * @memberof QGPTPersonsRelatedInput
	 */
	seed?: Seed;
	/**
	 *
	 * @type {QGPTConversation}
	 * @memberof QGPTPersonsRelatedInput
	 */
	conversation?: QGPTConversation;
	/**
	 * optional application id
	 * @type {string}
	 * @memberof QGPTPersonsRelatedInput
	 */
	application?: string;
	/**
	 * optional model id
	 * @type {string}
	 * @memberof QGPTPersonsRelatedInput
	 */
	model?: string;
}

/**
 * Check if a given object implements the QGPTPersonsRelatedInput interface.
 */
export function instanceOfQGPTPersonsRelatedInput(_value: object): boolean {
	const isInstance = true;

	return isInstance;
}

export function QGPTPersonsRelatedInputFromJSON(
	json: any,
): QGPTPersonsRelatedInput {
	return QGPTPersonsRelatedInputFromJSONTyped(json, false);
}

export function QGPTPersonsRelatedInputFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): QGPTPersonsRelatedInput {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		seed: exists(json, "seed") ? SeedFromJSON(json["seed"]) : undefined,
		conversation: exists(json, "conversation")
			? QGPTConversationFromJSON(json["conversation"])
			: undefined,
		application: exists(json, "application")
			? json["application"]
			: undefined,
		model: exists(json, "model") ? json["model"] : undefined,
	};
}

export function QGPTPersonsRelatedInputToJSON(
	value?: QGPTPersonsRelatedInput | null,
): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		seed: SeedToJSON(value.seed),
		conversation: QGPTConversationToJSON(value.conversation),
		application: value.application,
		model: value.model,
	};
}
