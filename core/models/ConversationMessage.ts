/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import type { ConversationMessageSentimentEnum } from "./ConversationMessageSentimentEnum.tsx";
import {
	ConversationMessageSentimentEnumFromJSON,
	ConversationMessageSentimentEnumToJSON,
} from "./ConversationMessageSentimentEnum.tsx";
import type { EmbeddedModelSchema } from "./EmbeddedModelSchema.tsx";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
} from "./EmbeddedModelSchema.tsx";
import type { FlattenedAnnotations } from "./FlattenedAnnotations.tsx";
import {
	FlattenedAnnotationsFromJSON,
	FlattenedAnnotationsToJSON,
} from "./FlattenedAnnotations.tsx";
import type { FragmentFormat } from "./FragmentFormat.tsx";
import {
	FragmentFormatFromJSON,
	FragmentFormatToJSON,
} from "./FragmentFormat.tsx";
import type { GroupedTimestamp } from "./GroupedTimestamp.tsx";
import {
	GroupedTimestampFromJSON,
	GroupedTimestampToJSON,
} from "./GroupedTimestamp.tsx";
import type { Model } from "./Model.tsx";
import { ModelFromJSON, ModelToJSON } from "./Model.tsx";
import type { QGPTConversationMessageRoleEnum } from "./QGPTConversationMessageRoleEnum.tsx";
import {
	QGPTConversationMessageRoleEnumFromJSON,
	QGPTConversationMessageRoleEnumToJSON,
} from "./QGPTConversationMessageRoleEnum.tsx";
import type { ReferencedConversation } from "./ReferencedConversation.tsx";
import {
	ReferencedConversationFromJSON,
	ReferencedConversationToJSON,
} from "./ReferencedConversation.tsx";
import type { Score } from "./Score.tsx";
import { ScoreFromJSON, ScoreToJSON } from "./Score.tsx";

/**
 * This is a fully referenced ConversationMessage.
 *
 * This has the minimum amount of properties to keep this light weight
 *
 * (will consider additional properties in the future like people/tags/links xyz)
 * @export
 * @interface ConversationMessage
 */
export interface ConversationMessage {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof ConversationMessage
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {string}
	 * @memberof ConversationMessage
	 */
	id: string;
	/**
	 *
	 * @type {GroupedTimestamp}
	 * @memberof ConversationMessage
	 */
	created: GroupedTimestamp;
	/**
	 *
	 * @type {GroupedTimestamp}
	 * @memberof ConversationMessage
	 */
	updated: GroupedTimestamp;
	/**
	 *
	 * @type {GroupedTimestamp}
	 * @memberof ConversationMessage
	 */
	deleted?: GroupedTimestamp;
	/**
	 *
	 * @type {Model}
	 * @memberof ConversationMessage
	 */
	model?: Model;
	/**
	 *
	 * @type {FragmentFormat}
	 * @memberof ConversationMessage
	 */
	fragment?: FragmentFormat;
	/**
	 *
	 * @type {ReferencedConversation}
	 * @memberof ConversationMessage
	 */
	conversation: ReferencedConversation;
	/**
	 *
	 * @type {ConversationMessageSentimentEnum}
	 * @memberof ConversationMessage
	 */
	sentiment?: ConversationMessageSentimentEnum;
	/**
	 *
	 * @type {QGPTConversationMessageRoleEnum}
	 * @memberof ConversationMessage
	 */
	role: QGPTConversationMessageRoleEnum;
	/**
	 *
	 * @type {Score}
	 * @memberof ConversationMessage
	 */
	score?: Score;
	/**
	 *
	 * @type {FlattenedAnnotations}
	 * @memberof ConversationMessage
	 */
	annotations?: FlattenedAnnotations;
}

/**
 * Check if a given object implements the ConversationMessage interface.
 */
export function instanceOfConversationMessage(value: object): boolean {
	let isInstance = true;
	isInstance = isInstance && "id" in value;
	isInstance = isInstance && "created" in value;
	isInstance = isInstance && "updated" in value;
	isInstance = isInstance && "conversation" in value;
	isInstance = isInstance && "role" in value;

	return isInstance;
}

export function ConversationMessageFromJSON(json: any): ConversationMessage {
	return ConversationMessageFromJSONTyped(json, false);
}

export function ConversationMessageFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): ConversationMessage {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		id: json["id"],
		created: GroupedTimestampFromJSON(json["created"]),
		updated: GroupedTimestampFromJSON(json["updated"]),
		deleted: exists(json, "deleted")
			? GroupedTimestampFromJSON(json["deleted"])
			: undefined,
		model: exists(json, "model") ? ModelFromJSON(json["model"]) : undefined,
		fragment: exists(json, "fragment")
			? FragmentFormatFromJSON(json["fragment"])
			: undefined,
		conversation: ReferencedConversationFromJSON(json["conversation"]),
		sentiment: exists(json, "sentiment")
			? ConversationMessageSentimentEnumFromJSON(json["sentiment"])
			: undefined,
		role: QGPTConversationMessageRoleEnumFromJSON(json["role"]),
		score: exists(json, "score") ? ScoreFromJSON(json["score"]) : undefined,
		annotations: exists(json, "annotations")
			? FlattenedAnnotationsFromJSON(json["annotations"])
			: undefined,
	};
}

export function ConversationMessageToJSON(
	value?: ConversationMessage | null,
): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		id: value.id,
		created: GroupedTimestampToJSON(value.created),
		updated: GroupedTimestampToJSON(value.updated),
		deleted: GroupedTimestampToJSON(value.deleted),
		model: ModelToJSON(value.model),
		fragment: FragmentFormatToJSON(value.fragment),
		conversation: ReferencedConversationToJSON(value.conversation),
		sentiment: ConversationMessageSentimentEnumToJSON(value.sentiment),
		role: QGPTConversationMessageRoleEnumToJSON(value.role),
		score: ScoreToJSON(value.score),
		annotations: FlattenedAnnotationsToJSON(value.annotations),
	};
}
