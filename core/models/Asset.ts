/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import {
	ActivitiesFromJSON,
	ActivitiesToJSON,
	type Activities,
} from "./Activities.tsx";
import { AnchorsFromJSON, AnchorsToJSON, type Anchors } from "./Anchors.tsx";
import {
	AnnotationsFromJSON,
	AnnotationsToJSON,
	type Annotations,
} from "./Annotations.tsx";
import {
	ConversationsFromJSON,
	ConversationsToJSON,
	type Conversations,
} from "./Conversations.tsx";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
	type EmbeddedModelSchema,
} from "./EmbeddedModelSchema.tsx";
import { FormatsFromJSON, FormatsToJSON, type Formats } from "./Formats.tsx";
import {
	GroupedTimestampFromJSON,
	GroupedTimestampToJSON,
	type GroupedTimestamp,
} from "./GroupedTimestamp.tsx";
import { HintsFromJSON, HintsToJSON, type Hints } from "./Hints.tsx";
import {
	MechanismEnumFromJSON,
	MechanismEnumToJSON,
	type MechanismEnum,
} from "./MechanismEnum.tsx";
import { PersonsFromJSON, PersonsToJSON, type Persons } from "./Persons.tsx";
import { PreviewFromJSON, PreviewToJSON, type Preview } from "./Preview.tsx";
import {
	ReferencedFormatFromJSON,
	ReferencedFormatToJSON,
	type ReferencedFormat,
} from "./ReferencedFormat.tsx";
import { ScoreFromJSON, ScoreToJSON, type Score } from "./Score.tsx";
import {
	SensitivesFromJSON,
	SensitivesToJSON,
	type Sensitives,
} from "./Sensitives.tsx";
import { SharesFromJSON, SharesToJSON, type Shares } from "./Shares.tsx";
import { TagsFromJSON, TagsToJSON, type Tags } from "./Tags.tsx";
import {
	WebsitesFromJSON,
	WebsitesToJSON,
	type Websites,
} from "./Websites.tsx";
import {
	WorkstreamSummariesFromJSON,
	WorkstreamSummariesToJSON,
	type WorkstreamSummaries,
} from "./WorkstreamSummaries.tsx";

/**
 * An Asset Model representing data extracted from an Application connecting a group of data containing one or more Formats.
 *
 * Below formats, preview, and original CAN to be pollinated (DAG Unsafe) because it is a root node and it's child leaf nodes will prevent cycles agressively.
 * @export
 * @interface Asset
 */
export interface Asset {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof Asset
	 */
	schema?: EmbeddedModelSchema;
	/**
	 * The globally available UID representing the asset in the Database, both locally and in the cloud.
	 * @type {string}
	 * @memberof Asset
	 */
	id: string;
	/**
	 *
	 * @type {string}
	 * @memberof Asset
	 */
	name?: string;
	/**
	 *
	 * @type {string}
	 * @memberof Asset
	 */
	creator: string;
	/**
	 *
	 * @type {GroupedTimestamp}
	 * @memberof Asset
	 */
	created: GroupedTimestamp;
	/**
	 *
	 * @type {GroupedTimestamp}
	 * @memberof Asset
	 */
	updated: GroupedTimestamp;
	/**
	 *
	 * @type {GroupedTimestamp}
	 * @memberof Asset
	 */
	synced?: GroupedTimestamp;
	/**
	 *
	 * @type {GroupedTimestamp}
	 * @memberof Asset
	 */
	deleted?: GroupedTimestamp;
	/**
	 *
	 * @type {Formats}
	 * @memberof Asset
	 */
	formats: Formats;
	/**
	 *
	 * @type {Preview}
	 * @memberof Asset
	 */
	preview: Preview;
	/**
	 *
	 * @type {ReferencedFormat}
	 * @memberof Asset
	 */
	original: ReferencedFormat;
	/**
	 *
	 * @type {Shares}
	 * @memberof Asset
	 */
	shares?: Shares;
	/**
	 *
	 * @type {MechanismEnum}
	 * @memberof Asset
	 */
	mechanism: MechanismEnum;
	/**
	 *
	 * @type {Websites}
	 * @memberof Asset
	 */
	websites?: Websites;
	/**
	 *
	 * @type {GroupedTimestamp}
	 * @memberof Asset
	 */
	interacted?: GroupedTimestamp;
	/**
	 *
	 * @type {Tags}
	 * @memberof Asset
	 */
	tags?: Tags;
	/**
	 *
	 * @type {Sensitives}
	 * @memberof Asset
	 */
	sensitives?: Sensitives;
	/**
	 *
	 * @type {Persons}
	 * @memberof Asset
	 */
	persons?: Persons;
	/**
	 * This is an optional boolean that will flag that this asset came from a currated collection.
	 * @type {boolean}
	 * @memberof Asset
	 */
	curated?: boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof Asset
	 */
	discovered?: boolean;
	/**
	 *
	 * @type {Activities}
	 * @memberof Asset
	 */
	activities?: Activities;
	/**
	 *
	 * @type {Score}
	 * @memberof Asset
	 */
	score?: Score;
	/**
	 *
	 * @type {boolean}
	 * @memberof Asset
	 */
	favorited?: boolean;
	/**
	 * This will determine if this is a asset that the user did not explicitly save.
	 * @type {boolean}
	 * @memberof Asset
	 */
	pseudo?: boolean;
	/**
	 *
	 * @type {Annotations}
	 * @memberof Asset
	 */
	annotations?: Annotations;
	/**
	 *
	 * @type {Hints}
	 * @memberof Asset
	 */
	hints?: Hints;
	/**
	 *
	 * @type {Anchors}
	 * @memberof Asset
	 */
	anchors?: Anchors;
	/**
	 *
	 * @type {Conversations}
	 * @memberof Asset
	 */
	conversations?: Conversations;
	/**
	 *
	 * @type {WorkstreamSummaries}
	 * @memberof Asset
	 */
	summaries?: WorkstreamSummaries;
	/**
	 * This will let us know if this asset was generated as a 'demo' snippet
	 * @type {boolean}
	 * @memberof Asset
	 */
	demo?: boolean;
}

/**
 * Check if a given object implements the Asset interface.
 */
export function instanceOfAsset(value: object): boolean {
	let isInstance = true;
	isInstance = isInstance && "id" in value;
	isInstance = isInstance && "creator" in value;
	isInstance = isInstance && "created" in value;
	isInstance = isInstance && "updated" in value;
	isInstance = isInstance && "formats" in value;
	isInstance = isInstance && "preview" in value;
	isInstance = isInstance && "original" in value;
	isInstance = isInstance && "mechanism" in value;

	return isInstance;
}

export function AssetFromJSON(json: any): Asset {
	return AssetFromJSONTyped(json, false);
}

export function AssetFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): Asset {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		id: json["id"],
		name: exists(json, "name") ? json["name"] : undefined,
		creator: json["creator"],
		created: GroupedTimestampFromJSON(json["created"]),
		updated: GroupedTimestampFromJSON(json["updated"]),
		synced: exists(json, "synced")
			? GroupedTimestampFromJSON(json["synced"])
			: undefined,
		deleted: exists(json, "deleted")
			? GroupedTimestampFromJSON(json["deleted"])
			: undefined,
		formats: FormatsFromJSON(json["formats"]),
		preview: PreviewFromJSON(json["preview"]),
		original: ReferencedFormatFromJSON(json["original"]),
		shares: exists(json, "shares")
			? SharesFromJSON(json["shares"])
			: undefined,
		mechanism: MechanismEnumFromJSON(json["mechanism"]),
		websites: exists(json, "websites")
			? WebsitesFromJSON(json["websites"])
			: undefined,
		interacted: exists(json, "interacted")
			? GroupedTimestampFromJSON(json["interacted"])
			: undefined,
		tags: exists(json, "tags") ? TagsFromJSON(json["tags"]) : undefined,
		sensitives: exists(json, "sensitives")
			? SensitivesFromJSON(json["sensitives"])
			: undefined,
		persons: exists(json, "persons")
			? PersonsFromJSON(json["persons"])
			: undefined,
		curated: exists(json, "curated") ? json["curated"] : undefined,
		discovered: exists(json, "discovered") ? json["discovered"] : undefined,
		activities: exists(json, "activities")
			? ActivitiesFromJSON(json["activities"])
			: undefined,
		score: exists(json, "score") ? ScoreFromJSON(json["score"]) : undefined,
		favorited: exists(json, "favorited") ? json["favorited"] : undefined,
		pseudo: exists(json, "pseudo") ? json["pseudo"] : undefined,
		annotations: exists(json, "annotations")
			? AnnotationsFromJSON(json["annotations"])
			: undefined,
		hints: exists(json, "hints") ? HintsFromJSON(json["hints"]) : undefined,
		anchors: exists(json, "anchors")
			? AnchorsFromJSON(json["anchors"])
			: undefined,
		conversations: exists(json, "conversations")
			? ConversationsFromJSON(json["conversations"])
			: undefined,
		summaries: exists(json, "summaries")
			? WorkstreamSummariesFromJSON(json["summaries"])
			: undefined,
		demo: exists(json, "demo") ? json["demo"] : undefined,
	};
}

export function AssetToJSON(value?: Asset | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		id: value.id,
		name: value.name,
		creator: value.creator,
		created: GroupedTimestampToJSON(value.created),
		updated: GroupedTimestampToJSON(value.updated),
		synced: GroupedTimestampToJSON(value.synced),
		deleted: GroupedTimestampToJSON(value.deleted),
		formats: FormatsToJSON(value.formats),
		preview: PreviewToJSON(value.preview),
		original: ReferencedFormatToJSON(value.original),
		shares: SharesToJSON(value.shares),
		mechanism: MechanismEnumToJSON(value.mechanism),
		websites: WebsitesToJSON(value.websites),
		interacted: GroupedTimestampToJSON(value.interacted),
		tags: TagsToJSON(value.tags),
		sensitives: SensitivesToJSON(value.sensitives),
		persons: PersonsToJSON(value.persons),
		curated: value.curated,
		discovered: value.discovered,
		activities: ActivitiesToJSON(value.activities),
		score: ScoreToJSON(value.score),
		favorited: value.favorited,
		pseudo: value.pseudo,
		annotations: AnnotationsToJSON(value.annotations),
		hints: HintsToJSON(value.hints),
		anchors: AnchorsToJSON(value.anchors),
		conversations: ConversationsToJSON(value.conversations),
		summaries: WorkstreamSummariesToJSON(value.summaries),
		demo: value.demo,
	};
}
