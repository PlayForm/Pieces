/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
	type EmbeddedModelSchema,
} from "./EmbeddedModelSchema.tsx";
import {
	FlattenedShareFromJSON,
	FlattenedShareToJSON,
	type FlattenedShare,
} from "./FlattenedShare.tsx";
import {
	GitHubDistributionFromJSON,
	GitHubDistributionToJSON,
	type GitHubDistribution,
} from "./GitHubDistribution.tsx";
import {
	GroupedTimestampFromJSON,
	GroupedTimestampToJSON,
	type GroupedTimestamp,
} from "./GroupedTimestamp.tsx";
import {
	MailgunDistributionFromJSON,
	MailgunDistributionToJSON,
	type MailgunDistribution,
} from "./MailgunDistribution.tsx";

/**
 * This is a fully referenced version of a Distribution.
 * TODO add additional distributions such as slack, google_chat, ...etc
 * @export
 * @interface Distribution
 */
export interface Distribution {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof Distribution
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {string}
	 * @memberof Distribution
	 */
	id: string;
	/**
	 *
	 * @type {FlattenedShare}
	 * @memberof Distribution
	 */
	share: FlattenedShare;
	/**
	 *
	 * @type {GroupedTimestamp}
	 * @memberof Distribution
	 */
	created: GroupedTimestamp;
	/**
	 *
	 * @type {GroupedTimestamp}
	 * @memberof Distribution
	 */
	updated: GroupedTimestamp;
	/**
	 *
	 * @type {GroupedTimestamp}
	 * @memberof Distribution
	 */
	deleted?: GroupedTimestamp;
	/**
	 *
	 * @type {MailgunDistribution}
	 * @memberof Distribution
	 */
	mailgun?: MailgunDistribution;
	/**
	 *
	 * @type {GitHubDistribution}
	 * @memberof Distribution
	 */
	github?: GitHubDistribution;
}

/**
 * Check if a given object implements the Distribution interface.
 */
export function instanceOfDistribution(value: object): boolean {
	let isInstance = true;
	isInstance = isInstance && "id" in value;
	isInstance = isInstance && "share" in value;
	isInstance = isInstance && "created" in value;
	isInstance = isInstance && "updated" in value;

	return isInstance;
}

export function DistributionFromJSON(json: any): Distribution {
	return DistributionFromJSONTyped(json, false);
}

export function DistributionFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): Distribution {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		id: json["id"],
		share: FlattenedShareFromJSON(json["share"]),
		created: GroupedTimestampFromJSON(json["created"]),
		updated: GroupedTimestampFromJSON(json["updated"]),
		deleted: exists(json, "deleted")
			? GroupedTimestampFromJSON(json["deleted"])
			: undefined,
		mailgun: exists(json, "mailgun")
			? MailgunDistributionFromJSON(json["mailgun"])
			: undefined,
		github: exists(json, "github")
			? GitHubDistributionFromJSON(json["github"])
			: undefined,
	};
}

export function DistributionToJSON(value?: Distribution | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		id: value.id,
		share: FlattenedShareToJSON(value.share),
		created: GroupedTimestampToJSON(value.created),
		updated: GroupedTimestampToJSON(value.updated),
		deleted: GroupedTimestampToJSON(value.deleted),
		mailgun: MailgunDistributionToJSON(value.mailgun),
		github: GitHubDistributionToJSON(value.github),
	};
}
