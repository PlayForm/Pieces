/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import {
	ApplicationFromJSON,
	ApplicationToJSON,
	type Application,
} from "./Application.tsx";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
	type EmbeddedModelSchema,
} from "./EmbeddedModelSchema.tsx";
import {
	ReferencedWorkstreamSummaryFromJSON,
	ReferencedWorkstreamSummaryToJSON,
	type ReferencedWorkstreamSummary,
} from "./ReferencedWorkstreamSummary.tsx";
import { ScoreFromJSON, ScoreToJSON, type Score } from "./Score.tsx";
import {
	WorkstreamEventContextFromJSON,
	WorkstreamEventContextToJSON,
	type WorkstreamEventContext,
} from "./WorkstreamEventContext.tsx";
import {
	WorkstreamEventTriggerFromJSON,
	WorkstreamEventTriggerToJSON,
	type WorkstreamEventTrigger,
} from "./WorkstreamEventTrigger.tsx";

/**
 * This is a precreated version of a WorkstreamEvent event, this will be used ingested into PiecesOS and PiecesOS will do all the magic to transform this into relevant data show in the workstream feed.
 * @export
 * @interface SeededWorkstreamEvent
 */
export interface SeededWorkstreamEvent {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof SeededWorkstreamEvent
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {Score}
	 * @memberof SeededWorkstreamEvent
	 */
	score?: Score;
	/**
	 *
	 * @type {Application}
	 * @memberof SeededWorkstreamEvent
	 */
	application: Application;
	/**
	 *
	 * @type {WorkstreamEventTrigger}
	 * @memberof SeededWorkstreamEvent
	 */
	trigger: WorkstreamEventTrigger;
	/**
	 *
	 * @type {WorkstreamEventContext}
	 * @memberof SeededWorkstreamEvent
	 */
	context?: WorkstreamEventContext;
	/**
	 *
	 * @type {ReferencedWorkstreamSummary}
	 * @memberof SeededWorkstreamEvent
	 */
	summary?: ReferencedWorkstreamSummary;
	/**
	 * This is used to override the event identifier, if this was an event that was originally in the internal events collection.
	 * @type {string}
	 * @memberof SeededWorkstreamEvent
	 */
	internalIdentifier?: string;
}

/**
 * Check if a given object implements the SeededWorkstreamEvent interface.
 */
export function instanceOfSeededWorkstreamEvent(value: object): boolean {
	let isInstance = true;
	isInstance = isInstance && "application" in value;
	isInstance = isInstance && "trigger" in value;

	return isInstance;
}

export function SeededWorkstreamEventFromJSON(
	json: any,
): SeededWorkstreamEvent {
	return SeededWorkstreamEventFromJSONTyped(json, false);
}

export function SeededWorkstreamEventFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): SeededWorkstreamEvent {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		score: exists(json, "score") ? ScoreFromJSON(json["score"]) : undefined,
		application: ApplicationFromJSON(json["application"]),
		trigger: WorkstreamEventTriggerFromJSON(json["trigger"]),
		context: exists(json, "context")
			? WorkstreamEventContextFromJSON(json["context"])
			: undefined,
		summary: exists(json, "summary")
			? ReferencedWorkstreamSummaryFromJSON(json["summary"])
			: undefined,
		internalIdentifier: exists(json, "internal_identifier")
			? json["internal_identifier"]
			: undefined,
	};
}

export function SeededWorkstreamEventToJSON(
	value?: SeededWorkstreamEvent | null,
): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		score: ScoreToJSON(value.score),
		application: ApplicationToJSON(value.application),
		trigger: WorkstreamEventTriggerToJSON(value.trigger),
		context: WorkstreamEventContextToJSON(value.context),
		summary: ReferencedWorkstreamSummaryToJSON(value.summary),
		internal_identifier: value.internalIdentifier,
	};
}
