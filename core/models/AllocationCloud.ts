/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import {
	AllocationCloudStatusFromJSON,
	AllocationCloudStatusToJSON,
	type AllocationCloudStatus,
} from "./AllocationCloudStatus.tsx";
import {
	AllocationCloudUrlsFromJSON,
	AllocationCloudUrlsToJSON,
	type AllocationCloudUrls,
} from "./AllocationCloudUrls.tsx";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
	type EmbeddedModelSchema,
} from "./EmbeddedModelSchema.tsx";
import {
	GroupedTimestampFromJSON,
	GroupedTimestampToJSON,
	type GroupedTimestamp,
} from "./GroupedTimestamp.tsx";

/**
 * update && version: will be present only if your cloud was successfully spun up && running.
 *
 * updated: is the last time this was updated.
 * @export
 * @interface AllocationCloud
 */
export interface AllocationCloud {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof AllocationCloud
	 */
	schema?: EmbeddedModelSchema;
	/**
	 * This is a uuid that represents this cloud.(this is the same as the userid)
	 * @type {string}
	 * @memberof AllocationCloud
	 */
	id: string;
	/**
	 * this is your useruuid.
	 * @type {string}
	 * @memberof AllocationCloud
	 */
	user: string;
	/**
	 *
	 * @type {AllocationCloudUrls}
	 * @memberof AllocationCloud
	 */
	urls: AllocationCloudUrls;
	/**
	 *
	 * @type {AllocationCloudStatus}
	 * @memberof AllocationCloud
	 */
	status: AllocationCloudStatus;
	/**
	 * This is the project that this is attached to.
	 * @type {string}
	 * @memberof AllocationCloud
	 */
	project: string;
	/**
	 *
	 * @type {GroupedTimestamp}
	 * @memberof AllocationCloud
	 */
	updated?: GroupedTimestamp;
	/**
	 * this is the current version of the server.
	 * @type {string}
	 * @memberof AllocationCloud
	 */
	version?: string;
	/**
	 * this is the region where the project is defined.
	 * @type {string}
	 * @memberof AllocationCloud
	 */
	region?: string;
}

/**
 * Check if a given object implements the AllocationCloud interface.
 */
export function instanceOfAllocationCloud(value: object): boolean {
	let isInstance = true;
	isInstance = isInstance && "id" in value;
	isInstance = isInstance && "user" in value;
	isInstance = isInstance && "urls" in value;
	isInstance = isInstance && "status" in value;
	isInstance = isInstance && "project" in value;

	return isInstance;
}

export function AllocationCloudFromJSON(json: any): AllocationCloud {
	return AllocationCloudFromJSONTyped(json, false);
}

export function AllocationCloudFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): AllocationCloud {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		id: json["id"],
		user: json["user"],
		urls: AllocationCloudUrlsFromJSON(json["urls"]),
		status: AllocationCloudStatusFromJSON(json["status"]),
		project: json["project"],
		updated: exists(json, "updated")
			? GroupedTimestampFromJSON(json["updated"])
			: undefined,
		version: exists(json, "version") ? json["version"] : undefined,
		region: exists(json, "region") ? json["region"] : undefined,
	};
}

export function AllocationCloudToJSON(value?: AllocationCloud | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		id: value.id,
		user: value.user,
		urls: AllocationCloudUrlsToJSON(value.urls),
		status: AllocationCloudStatusToJSON(value.status),
		project: value.project,
		updated: GroupedTimestampToJSON(value.updated),
		version: value.version,
		region: value.region,
	};
}
