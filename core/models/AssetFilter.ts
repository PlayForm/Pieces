/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import {
	AssetFilterPhraseFromJSON,
	AssetFilterPhraseToJSON,
	type AssetFilterPhrase,
} from "./AssetFilterPhrase.tsx";
import {
	AssetFiltersFromJSON,
	AssetFiltersToJSON,
	type AssetFilters,
} from "./AssetFilters.tsx";
import {
	AssetFilterTimestampFromJSON,
	AssetFilterTimestampToJSON,
	type AssetFilterTimestamp,
} from "./AssetFilterTimestamp.tsx";
import {
	ClassificationSpecificEnumFromJSON,
	ClassificationSpecificEnumToJSON,
	type ClassificationSpecificEnum,
} from "./ClassificationSpecificEnum.tsx";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
	type EmbeddedModelSchema,
} from "./EmbeddedModelSchema.tsx";

/**
 * ** in the future, consider adding an optional bool's called nextAnd, nextOr which will say that the next filter will be  AND behavor or OR behavior.
 *
 * "operations": here is is an optional property to allow or behavior,(we will only allow 1 level deep of or's), if or is not passed in then it is just simply ignored. If or is passed in then we will be or'd together with the top level filter and considered extras. default behavior for operations is and, however yoour can specifiy OR operations as well.
 * @export
 * @interface AssetFilter
 */
export interface AssetFilter {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof AssetFilter
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {ClassificationSpecificEnum}
	 * @memberof AssetFilter
	 */
	classification?: ClassificationSpecificEnum;
	/**
	 *
	 * @type {Array<string>}
	 * @memberof AssetFilter
	 */
	tags?: string[];
	/**
	 *
	 * @type {Array<string>}
	 * @memberof AssetFilter
	 */
	websites?: string[];
	/**
	 *
	 * @type {Array<string>}
	 * @memberof AssetFilter
	 */
	persons?: string[];
	/**
	 *
	 * @type {AssetFilterPhrase}
	 * @memberof AssetFilter
	 */
	phrase?: AssetFilterPhrase;
	/**
	 *
	 * @type {AssetFilterTimestamp}
	 * @memberof AssetFilter
	 */
	created?: AssetFilterTimestamp;
	/**
	 *
	 * @type {AssetFilterTimestamp}
	 * @memberof AssetFilter
	 */
	updated?: AssetFilterTimestamp;
	/**
	 *
	 * @type {AssetFilters}
	 * @memberof AssetFilter
	 */
	operations?: AssetFilters;
}

/**
 * Check if a given object implements the AssetFilter interface.
 */
export function instanceOfAssetFilter(_value: object): boolean {
	const isInstance = true;

	return isInstance;
}

export function AssetFilterFromJSON(json: any): AssetFilter {
	return AssetFilterFromJSONTyped(json, false);
}

export function AssetFilterFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): AssetFilter {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		classification: exists(json, "classification")
			? ClassificationSpecificEnumFromJSON(json["classification"])
			: undefined,
		tags: exists(json, "tags") ? json["tags"] : undefined,
		websites: exists(json, "websites") ? json["websites"] : undefined,
		persons: exists(json, "persons") ? json["persons"] : undefined,
		phrase: exists(json, "phrase")
			? AssetFilterPhraseFromJSON(json["phrase"])
			: undefined,
		created: exists(json, "created")
			? AssetFilterTimestampFromJSON(json["created"])
			: undefined,
		updated: exists(json, "updated")
			? AssetFilterTimestampFromJSON(json["updated"])
			: undefined,
		operations: exists(json, "operations")
			? AssetFiltersFromJSON(json["operations"])
			: undefined,
	};
}

export function AssetFilterToJSON(value?: AssetFilter | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		classification: ClassificationSpecificEnumToJSON(value.classification),
		tags: value.tags,
		websites: value.websites,
		persons: value.persons,
		phrase: AssetFilterPhraseToJSON(value.phrase),
		created: AssetFilterTimestampToJSON(value.created),
		updated: AssetFilterTimestampToJSON(value.updated),
		operations: AssetFiltersToJSON(value.operations),
	};
}
