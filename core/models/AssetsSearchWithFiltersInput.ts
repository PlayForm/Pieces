/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import type { AssetFilters } from "./AssetFilters.tsx";
import { AssetFiltersFromJSON, AssetFiltersToJSON } from "./AssetFilters.tsx";
import type { AssetSearchSpace } from "./AssetSearchSpace.tsx";
import {
	AssetSearchSpaceFromJSON,
	AssetSearchSpaceToJSON,
} from "./AssetSearchSpace.tsx";
import type { EmbeddedModelSchema } from "./EmbeddedModelSchema.tsx";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
} from "./EmbeddedModelSchema.tsx";

/**
 *
 * @export
 * @interface AssetsSearchWithFiltersInput
 */
export interface AssetsSearchWithFiltersInput {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof AssetsSearchWithFiltersInput
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {string}
	 * @memberof AssetsSearchWithFiltersInput
	 */
	query?: string;
	/**
	 *
	 * @type {AssetSearchSpace}
	 * @memberof AssetsSearchWithFiltersInput
	 */
	space?: AssetSearchSpace;
	/**
	 *
	 * @type {AssetFilters}
	 * @memberof AssetsSearchWithFiltersInput
	 */
	filters?: AssetFilters;
	/**
	 * This is an optional bool that will let us know, if we want to ignore case or not.(default is to allow casing)ie casing:true.
	 * @type {boolean}
	 * @memberof AssetsSearchWithFiltersInput
	 */
	casing?: boolean;
}

/**
 * Check if a given object implements the AssetsSearchWithFiltersInput interface.
 */
export function instanceOfAssetsSearchWithFiltersInput(
	_value: object,
): boolean {
	const isInstance = true;

	return isInstance;
}

export function AssetsSearchWithFiltersInputFromJSON(
	json: any,
): AssetsSearchWithFiltersInput {
	return AssetsSearchWithFiltersInputFromJSONTyped(json, false);
}

export function AssetsSearchWithFiltersInputFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): AssetsSearchWithFiltersInput {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		query: exists(json, "query") ? json["query"] : undefined,
		space: exists(json, "space")
			? AssetSearchSpaceFromJSON(json["space"])
			: undefined,
		filters: exists(json, "filters")
			? AssetFiltersFromJSON(json["filters"])
			: undefined,
		casing: exists(json, "casing") ? json["casing"] : undefined,
	};
}

export function AssetsSearchWithFiltersInputToJSON(
	value?: AssetsSearchWithFiltersInput | null,
): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		query: value.query,
		space: AssetSearchSpaceToJSON(value.space),
		filters: AssetFiltersToJSON(value.filters),
		casing: value.casing,
	};
}
