/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import type { ByteDescriptor } from "./ByteDescriptor.tsx";
import {
	ByteDescriptorFromJSON,
	ByteDescriptorToJSON,
} from "./ByteDescriptor.tsx";
import type { EmbeddedModelSchema } from "./EmbeddedModelSchema.tsx";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
} from "./EmbeddedModelSchema.tsx";

/**
 * This is the progress for the OSFileStreamingRead
 * @export
 * @interface OSFileStreamingReadProgress
 */
export interface OSFileStreamingReadProgress {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof OSFileStreamingReadProgress
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {ByteDescriptor}
	 * @memberof OSFileStreamingReadProgress
	 */
	total: ByteDescriptor;
	/**
	 *
	 * @type {ByteDescriptor}
	 * @memberof OSFileStreamingReadProgress
	 */
	transferred: ByteDescriptor;
}

/**
 * Check if a given object implements the OSFileStreamingReadProgress interface.
 */
export function instanceOfOSFileStreamingReadProgress(value: object): boolean {
	let isInstance = true;
	isInstance = isInstance && "total" in value;
	isInstance = isInstance && "transferred" in value;

	return isInstance;
}

export function OSFileStreamingReadProgressFromJSON(
	json: any,
): OSFileStreamingReadProgress {
	return OSFileStreamingReadProgressFromJSONTyped(json, false);
}

export function OSFileStreamingReadProgressFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): OSFileStreamingReadProgress {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		total: ByteDescriptorFromJSON(json["total"]),
		transferred: ByteDescriptorFromJSON(json["transferred"]),
	};
}

export function OSFileStreamingReadProgressToJSON(
	value?: OSFileStreamingReadProgress | null,
): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		total: ByteDescriptorToJSON(value.total),
		transferred: ByteDescriptorToJSON(value.transferred),
	};
}
