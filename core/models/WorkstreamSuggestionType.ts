/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * This is used to map the types of the iterable to given booleans of their respective material types
 * @export
 * @interface WorkstreamSuggestionType
 */
export interface WorkstreamSuggestionType {
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    schema?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    summary?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    asset?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    tag?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    website?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    anchor?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    conversation?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    person?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    seed?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    seeds?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    summaries?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    assets?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    tags?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    websites?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    anchors?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    conversations?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkstreamSuggestionType
     */
    persons?: boolean;
}

/**
 * Check if a given object implements the WorkstreamSuggestionType interface.
 */
export function instanceOfWorkstreamSuggestionType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function WorkstreamSuggestionTypeFromJSON(json: any): WorkstreamSuggestionType {
    return WorkstreamSuggestionTypeFromJSONTyped(json, false);
}

export function WorkstreamSuggestionTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkstreamSuggestionType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'schema': !exists(json, 'schema') ? undefined : json['schema'],
        'summary': !exists(json, 'summary') ? undefined : json['summary'],
        'asset': !exists(json, 'asset') ? undefined : json['asset'],
        'tag': !exists(json, 'tag') ? undefined : json['tag'],
        'website': !exists(json, 'website') ? undefined : json['website'],
        'anchor': !exists(json, 'anchor') ? undefined : json['anchor'],
        'conversation': !exists(json, 'conversation') ? undefined : json['conversation'],
        'person': !exists(json, 'person') ? undefined : json['person'],
        'seed': !exists(json, 'seed') ? undefined : json['seed'],
        'seeds': !exists(json, 'seeds') ? undefined : json['seeds'],
        'summaries': !exists(json, 'summaries') ? undefined : json['summaries'],
        'assets': !exists(json, 'assets') ? undefined : json['assets'],
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'websites': !exists(json, 'websites') ? undefined : json['websites'],
        'anchors': !exists(json, 'anchors') ? undefined : json['anchors'],
        'conversations': !exists(json, 'conversations') ? undefined : json['conversations'],
        'persons': !exists(json, 'persons') ? undefined : json['persons'],
    };
}

export function WorkstreamSuggestionTypeToJSON(value?: WorkstreamSuggestionType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'schema': value.schema,
        'summary': value.summary,
        'asset': value.asset,
        'tag': value.tag,
        'website': value.website,
        'anchor': value.anchor,
        'conversation': value.conversation,
        'person': value.person,
        'seed': value.seed,
        'seeds': value.seeds,
        'summaries': value.summaries,
        'assets': value.assets,
        'tags': value.tags,
        'websites': value.websites,
        'anchors': value.anchors,
        'conversations': value.conversations,
        'persons': value.persons,
    };
}

