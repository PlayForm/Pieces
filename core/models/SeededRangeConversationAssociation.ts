/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
	type EmbeddedModelSchema,
} from "./EmbeddedModelSchema.tsx";
import {
	ReferencedConversationFromJSON,
	ReferencedConversationToJSON,
	type ReferencedConversation,
} from "./ReferencedConversation.tsx";
import {
	SeededRangeConversationGroundingAssociationFromJSON,
	SeededRangeConversationGroundingAssociationToJSON,
	type SeededRangeConversationGroundingAssociation,
} from "./SeededRangeConversationGroundingAssociation.tsx";

/**
 *
 * @export
 * @interface SeededRangeConversationAssociation
 */
export interface SeededRangeConversationAssociation {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof SeededRangeConversationAssociation
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {ReferencedConversation}
	 * @memberof SeededRangeConversationAssociation
	 */
	reference: ReferencedConversation;
	/**
	 *
	 * @type {SeededRangeConversationGroundingAssociation}
	 * @memberof SeededRangeConversationAssociation
	 */
	grounding?: SeededRangeConversationGroundingAssociation;
}

/**
 * Check if a given object implements the SeededRangeConversationAssociation interface.
 */
export function instanceOfSeededRangeConversationAssociation(
	value: object,
): boolean {
	let isInstance = true;
	isInstance = isInstance && "reference" in value;

	return isInstance;
}

export function SeededRangeConversationAssociationFromJSON(
	json: any,
): SeededRangeConversationAssociation {
	return SeededRangeConversationAssociationFromJSONTyped(json, false);
}

export function SeededRangeConversationAssociationFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): SeededRangeConversationAssociation {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		reference: ReferencedConversationFromJSON(json["reference"]),
		grounding: exists(json, "grounding")
			? SeededRangeConversationGroundingAssociationFromJSON(
					json["grounding"],
				)
			: undefined,
	};
}

export function SeededRangeConversationAssociationToJSON(
	value?: SeededRangeConversationAssociation | null,
): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		reference: ReferencedConversationToJSON(value.reference),
		grounding: SeededRangeConversationGroundingAssociationToJSON(
			value.grounding,
		),
	};
}
