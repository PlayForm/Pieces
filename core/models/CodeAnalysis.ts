/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import type { ClassificationGenericEnum } from "./ClassificationGenericEnum.tsx";
import {
	ClassificationGenericEnumFromJSON,
	ClassificationGenericEnumToJSON,
} from "./ClassificationGenericEnum.tsx";
import type { EmbeddedModelSchema } from "./EmbeddedModelSchema.tsx";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
} from "./EmbeddedModelSchema.tsx";
import type { Model } from "./Model.tsx";
import { ModelFromJSON, ModelToJSON } from "./Model.tsx";

/**
 * This is the ML Analysis object Specific to code.
 *
 * prediction and similarity are custom types. ** please dont not modify **
 * @export
 * @interface CodeAnalysis
 */
export interface CodeAnalysis {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof CodeAnalysis
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {Array<string>}
	 * @memberof CodeAnalysis
	 */
	tokenized?: string[];
	/**
	 *
	 * @type {string}
	 * @memberof CodeAnalysis
	 */
	language?: string;
	/**
	 *
	 * @type {ClassificationGenericEnum}
	 * @memberof CodeAnalysis
	 */
	type: ClassificationGenericEnum;
	/**
	 *
	 * @type {{ [key: string]: number; }}
	 * @memberof CodeAnalysis
	 */
	prediction?: { [key: string]: number };
	/**
	 *
	 * @type {{ [key: string]: number; }}
	 * @memberof CodeAnalysis
	 */
	similarity?: { [key: string]: number };
	/**
	 *
	 * @type {Array<number>}
	 * @memberof CodeAnalysis
	 */
	top5Colors?: number[];
	/**
	 *
	 * @type {Array<string>}
	 * @memberof CodeAnalysis
	 */
	top5Sorted?: string[];
	/**
	 *
	 * @type {string}
	 * @memberof CodeAnalysis
	 */
	id: string;
	/**
	 * this is just a reference to the analysis parent object.
	 * @type {string}
	 * @memberof CodeAnalysis
	 */
	analysis: string;
	/**
	 *
	 * @type {Model}
	 * @memberof CodeAnalysis
	 */
	model: Model;
}

/**
 * Check if a given object implements the CodeAnalysis interface.
 */
export function instanceOfCodeAnalysis(value: object): boolean {
	let isInstance = true;
	isInstance = isInstance && "type" in value;
	isInstance = isInstance && "id" in value;
	isInstance = isInstance && "analysis" in value;
	isInstance = isInstance && "model" in value;

	return isInstance;
}

export function CodeAnalysisFromJSON(json: any): CodeAnalysis {
	return CodeAnalysisFromJSONTyped(json, false);
}

export function CodeAnalysisFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): CodeAnalysis {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		tokenized: exists(json, "tokenized") ? json["tokenized"] : undefined,
		language: exists(json, "language") ? json["language"] : undefined,
		type: ClassificationGenericEnumFromJSON(json["type"]),
		prediction: exists(json, "prediction") ? json["prediction"] : undefined,
		similarity: exists(json, "similarity") ? json["similarity"] : undefined,
		top5Colors: exists(json, "top5Colors") ? json["top5Colors"] : undefined,
		top5Sorted: exists(json, "top5Sorted") ? json["top5Sorted"] : undefined,
		id: json["id"],
		analysis: json["analysis"],
		model: ModelFromJSON(json["model"]),
	};
}

export function CodeAnalysisToJSON(value?: CodeAnalysis | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		tokenized: value.tokenized,
		language: value.language,
		type: ClassificationGenericEnumToJSON(value.type),
		prediction: value.prediction,
		similarity: value.similarity,
		top5Colors: value.top5Colors,
		top5Sorted: value.top5Sorted,
		id: value.id,
		analysis: value.analysis,
		model: ModelToJSON(value.model),
	};
}
