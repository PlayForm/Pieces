/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import type { AnonymousTemporalRange } from "./AnonymousTemporalRange.tsx";
import {
	AnonymousTemporalRangeFromJSON,
	AnonymousTemporalRangeToJSON,
} from "./AnonymousTemporalRange.tsx";
import type { Classifications } from "./Classifications.tsx";
import {
	ClassificationsFromJSON,
	ClassificationsToJSON,
} from "./Classifications.tsx";
import type { DocumentContributors } from "./DocumentContributors.tsx";
import {
	DocumentContributorsFromJSON,
	DocumentContributorsToJSON,
} from "./DocumentContributors.tsx";
import type { EmbeddedModelSchema } from "./EmbeddedModelSchema.tsx";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
} from "./EmbeddedModelSchema.tsx";
import type { SeededAnchor } from "./SeededAnchor.tsx";
import { SeededAnchorFromJSON, SeededAnchorToJSON } from "./SeededAnchor.tsx";

/**
 * This is a representation of a Module or a Project
 *
 * anchor: is the folder path of this repo/module
 *
 * contributors: is a nice to have is all the contributors of this repo/module
 *
 * range: is the amount of time this user has been working on this repo
 *
 * classifications: if all the languages that are used within this repo/module
 * @export
 * @interface ProjectModule
 */
export interface ProjectModule {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof ProjectModule
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {SeededAnchor}
	 * @memberof ProjectModule
	 */
	anchor: SeededAnchor;
	/**
	 *
	 * @type {AnonymousTemporalRange}
	 * @memberof ProjectModule
	 */
	range?: AnonymousTemporalRange;
	/**
	 *
	 * @type {DocumentContributors}
	 * @memberof ProjectModule
	 */
	contributors?: DocumentContributors;
	/**
	 *
	 * @type {Classifications}
	 * @memberof ProjectModule
	 */
	classifications?: Classifications;
}

/**
 * Check if a given object implements the ProjectModule interface.
 */
export function instanceOfProjectModule(value: object): boolean {
	let isInstance = true;
	isInstance = isInstance && "anchor" in value;

	return isInstance;
}

export function ProjectModuleFromJSON(json: any): ProjectModule {
	return ProjectModuleFromJSONTyped(json, false);
}

export function ProjectModuleFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): ProjectModule {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		anchor: SeededAnchorFromJSON(json["anchor"]),
		range: exists(json, "range")
			? AnonymousTemporalRangeFromJSON(json["range"])
			: undefined,
		contributors: exists(json, "contributors")
			? DocumentContributorsFromJSON(json["contributors"])
			: undefined,
		classifications: exists(json, "classifications")
			? ClassificationsFromJSON(json["classifications"])
			: undefined,
	};
}

export function ProjectModuleToJSON(value?: ProjectModule | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		anchor: SeededAnchorToJSON(value.anchor),
		range: AnonymousTemporalRangeToJSON(value.range),
		contributors: DocumentContributorsToJSON(value.contributors),
		classifications: ClassificationsToJSON(value.classifications),
	};
}
