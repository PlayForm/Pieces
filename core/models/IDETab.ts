/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import {
	AnonymousTemporalRangeFromJSON,
	AnonymousTemporalRangeToJSON,
	type AnonymousTemporalRange,
} from "./AnonymousTemporalRange.tsx";
import {
	ClassificationFromJSON,
	ClassificationToJSON,
	type Classification,
} from "./Classification.tsx";
import {
	DocumentContributorsFromJSON,
	DocumentContributorsToJSON,
	type DocumentContributors,
} from "./DocumentContributors.tsx";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
	type EmbeddedModelSchema,
} from "./EmbeddedModelSchema.tsx";
import {
	IDESelectionsFromJSON,
	IDESelectionsToJSON,
	type IDESelections,
} from "./IDESelections.tsx";
import {
	LanguageServerProtocolFromJSON,
	LanguageServerProtocolToJSON,
	type LanguageServerProtocol,
} from "./LanguageServerProtocol.tsx";
import {
	SeededAnchorFromJSON,
	SeededAnchorToJSON,
	type SeededAnchor,
} from "./SeededAnchor.tsx";
import {
	TransferableStringFromJSON,
	TransferableStringToJSON,
	type TransferableString,
} from "./TransferableString.tsx";

/**
 * This is a representation of an IDE Tab
 *
 * value: is the value of the entire file(that being said we do not recomment passing this over as we can read this file on PieceOS side of things)
 * classification: this is the classifcation of this file
 *
 * selection: this is a represention of a copy/paste/selection of a bit of code
 *
 * anchor: this is the file path
 *
 * range: this is the duration that this user has been on this Tab
 *
 * current: is a boolean that will let us know if this is the current active tab
 *
 * contributors: is the people that are extracted via git
 *
 * lsp: this is the languageserverprotocol this is used for may things such as error,stackstrces, mainly information extracted from the lang server
 * @export
 * @interface IDETab
 */
export interface IDETab {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof IDETab
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {TransferableString}
	 * @memberof IDETab
	 */
	value?: TransferableString;
	/**
	 *
	 * @type {Classification}
	 * @memberof IDETab
	 */
	classification?: Classification;
	/**
	 *
	 * @type {IDESelections}
	 * @memberof IDETab
	 */
	selections?: IDESelections;
	/**
	 *
	 * @type {SeededAnchor}
	 * @memberof IDETab
	 */
	anchor: SeededAnchor;
	/**
	 *
	 * @type {AnonymousTemporalRange}
	 * @memberof IDETab
	 */
	range?: AnonymousTemporalRange;
	/**
	 *
	 * @type {boolean}
	 * @memberof IDETab
	 */
	current?: boolean;
	/**
	 *
	 * @type {DocumentContributors}
	 * @memberof IDETab
	 */
	contributors?: DocumentContributors;
	/**
	 *
	 * @type {LanguageServerProtocol}
	 * @memberof IDETab
	 */
	lsp?: LanguageServerProtocol;
}

/**
 * Check if a given object implements the IDETab interface.
 */
export function instanceOfIDETab(value: object): boolean {
	let isInstance = true;
	isInstance = isInstance && "anchor" in value;

	return isInstance;
}

export function IDETabFromJSON(json: any): IDETab {
	return IDETabFromJSONTyped(json, false);
}

export function IDETabFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): IDETab {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		value: exists(json, "value")
			? TransferableStringFromJSON(json["value"])
			: undefined,
		classification: exists(json, "classification")
			? ClassificationFromJSON(json["classification"])
			: undefined,
		selections: exists(json, "selections")
			? IDESelectionsFromJSON(json["selections"])
			: undefined,
		anchor: SeededAnchorFromJSON(json["anchor"]),
		range: exists(json, "range")
			? AnonymousTemporalRangeFromJSON(json["range"])
			: undefined,
		current: exists(json, "current") ? json["current"] : undefined,
		contributors: exists(json, "contributors")
			? DocumentContributorsFromJSON(json["contributors"])
			: undefined,
		lsp: exists(json, "lsp")
			? LanguageServerProtocolFromJSON(json["lsp"])
			: undefined,
	};
}

export function IDETabToJSON(value?: IDETab | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		value: TransferableStringToJSON(value.value),
		classification: ClassificationToJSON(value.classification),
		selections: IDESelectionsToJSON(value.selections),
		anchor: SeededAnchorToJSON(value.anchor),
		range: AnonymousTemporalRangeToJSON(value.range),
		current: value.current,
		contributors: DocumentContributorsToJSON(value.contributors),
		lsp: LanguageServerProtocolToJSON(value.lsp),
	};
}
