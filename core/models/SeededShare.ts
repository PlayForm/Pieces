/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import {
	AccessEnumFromJSON,
	AccessEnumToJSON,
	type AccessEnum,
} from "./AccessEnum.tsx";
import { AssetFromJSON, AssetToJSON, type Asset } from "./Asset.tsx";
import { AssetsFromJSON, AssetsToJSON, type Assets } from "./Assets.tsx";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
	type EmbeddedModelSchema,
} from "./EmbeddedModelSchema.tsx";
import {
	SeededUserFromJSON,
	SeededUserToJSON,
	type SeededUser,
} from "./SeededUser.tsx";

/**
 *  required to pass in an asset or assets.
 * @export
 * @interface SeededShare
 */
export interface SeededShare {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof SeededShare
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {Asset}
	 * @memberof SeededShare
	 */
	asset?: Asset;
	/**
	 * if private please specificy some users you want to share this with.
	 * @type {Array<SeededUser>}
	 * @memberof SeededShare
	 */
	users?: SeededUser[];
	/**
	 *
	 * @type {AccessEnum}
	 * @memberof SeededShare
	 */
	access: AccessEnum;
	/**
	 *
	 * @type {Assets}
	 * @memberof SeededShare
	 */
	assets?: Assets;
	/**
	 * optional name, if it is available. and must be unique.
	 * @type {string}
	 * @memberof SeededShare
	 */
	name?: string;
}

/**
 * Check if a given object implements the SeededShare interface.
 */
export function instanceOfSeededShare(value: object): boolean {
	let isInstance = true;
	isInstance = isInstance && "access" in value;

	return isInstance;
}

export function SeededShareFromJSON(json: any): SeededShare {
	return SeededShareFromJSONTyped(json, false);
}

export function SeededShareFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): SeededShare {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		asset: exists(json, "asset") ? AssetFromJSON(json["asset"]) : undefined,
		users: exists(json, "users")
			? (json["users"] as any[]).map(SeededUserFromJSON)
			: undefined,
		access: AccessEnumFromJSON(json["access"]),
		assets: exists(json, "assets")
			? AssetsFromJSON(json["assets"])
			: undefined,
		name: exists(json, "name") ? json["name"] : undefined,
	};
}

export function SeededShareToJSON(value?: SeededShare | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		asset: AssetToJSON(value.asset),
		users:
			value.users === undefined
				? undefined
				: (value.users as any[]).map(SeededUserToJSON),
		access: AccessEnumToJSON(value.access),
		assets: AssetsToJSON(value.assets),
		name: value.name,
	};
}
