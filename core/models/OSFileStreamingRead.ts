/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
	type EmbeddedModelSchema,
} from "./EmbeddedModelSchema.tsx";
import {
	ModelDownloadProgressStatusEnumFromJSON,
	ModelDownloadProgressStatusEnumToJSON,
	type ModelDownloadProgressStatusEnum,
} from "./ModelDownloadProgressStatusEnum.tsx";
import {
	OSFileStreamingReadProgressFromJSON,
	OSFileStreamingReadProgressToJSON,
	type OSFileStreamingReadProgress,
} from "./OSFileStreamingReadProgress.tsx";
import {
	TransferableBytesFromJSON,
	TransferableBytesToJSON,
	type TransferableBytes,
} from "./TransferableBytes.tsx";

/**
 * This is a model to return stream progress for a file read.
 * @export
 * @interface OSFileStreamingRead
 */
export interface OSFileStreamingRead {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof OSFileStreamingRead
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {ModelDownloadProgressStatusEnum}
	 * @memberof OSFileStreamingRead
	 */
	status: ModelDownloadProgressStatusEnum;
	/**
	 * Optionally if the download is in progress you will receive a download percent(from 0-100).
	 * @type {number}
	 * @memberof OSFileStreamingRead
	 */
	percentage?: number | null;
	/**
	 *
	 * @type {string}
	 * @memberof OSFileStreamingRead
	 */
	path: string;
	/**
	 * This is a generated UUID that represents this current stream in progress(can be used to cancel this in the future)
	 * @type {string}
	 * @memberof OSFileStreamingRead
	 */
	id: string;
	/**
	 *
	 * @type {TransferableBytes}
	 * @memberof OSFileStreamingRead
	 */
	bytes?: TransferableBytes;
	/**
	 *
	 * @type {OSFileStreamingReadProgress}
	 * @memberof OSFileStreamingRead
	 */
	progress?: OSFileStreamingReadProgress;
}

/**
 * Check if a given object implements the OSFileStreamingRead interface.
 */
export function instanceOfOSFileStreamingRead(value: object): boolean {
	let isInstance = true;
	isInstance = isInstance && "status" in value;
	isInstance = isInstance && "path" in value;
	isInstance = isInstance && "id" in value;

	return isInstance;
}

export function OSFileStreamingReadFromJSON(json: any): OSFileStreamingRead {
	return OSFileStreamingReadFromJSONTyped(json, false);
}

export function OSFileStreamingReadFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): OSFileStreamingRead {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		status: ModelDownloadProgressStatusEnumFromJSON(json["status"]),
		percentage: exists(json, "percentage") ? json["percentage"] : undefined,
		path: json["path"],
		id: json["id"],
		bytes: exists(json, "bytes")
			? TransferableBytesFromJSON(json["bytes"])
			: undefined,
		progress: exists(json, "progress")
			? OSFileStreamingReadProgressFromJSON(json["progress"])
			: undefined,
	};
}

export function OSFileStreamingReadToJSON(
	value?: OSFileStreamingRead | null,
): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		status: ModelDownloadProgressStatusEnumToJSON(value.status),
		percentage: value.percentage,
		path: value.path,
		id: value.id,
		bytes: TransferableBytesToJSON(value.bytes),
		progress: OSFileStreamingReadProgressToJSON(value.progress),
	};
}
