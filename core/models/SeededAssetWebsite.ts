/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
	type EmbeddedModelSchema,
} from "./EmbeddedModelSchema.tsx";
import {
	MechanismEnumFromJSON,
	MechanismEnumToJSON,
	type MechanismEnum,
} from "./MechanismEnum.tsx";

/**
 * This is similar to an SeededWebsite, where this is the minimum information of a website, but this can get added to a seededAsset,  where you may not yet have an asset id.
 * @export
 * @interface SeededAssetWebsite
 */
export interface SeededAssetWebsite {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof SeededAssetWebsite
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {string}
	 * @memberof SeededAssetWebsite
	 */
	url: string;
	/**
	 *
	 * @type {string}
	 * @memberof SeededAssetWebsite
	 */
	name: string;
	/**
	 *
	 * @type {MechanismEnum}
	 * @memberof SeededAssetWebsite
	 */
	mechanism?: MechanismEnum;
}

/**
 * Check if a given object implements the SeededAssetWebsite interface.
 */
export function instanceOfSeededAssetWebsite(value: object): boolean {
	let isInstance = true;
	isInstance = isInstance && "url" in value;
	isInstance = isInstance && "name" in value;

	return isInstance;
}

export function SeededAssetWebsiteFromJSON(json: any): SeededAssetWebsite {
	return SeededAssetWebsiteFromJSONTyped(json, false);
}

export function SeededAssetWebsiteFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): SeededAssetWebsite {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		url: json["url"],
		name: json["name"],
		mechanism: exists(json, "mechanism")
			? MechanismEnumFromJSON(json["mechanism"])
			: undefined,
	};
}

export function SeededAssetWebsiteToJSON(
	value?: SeededAssetWebsite | null,
): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		url: value.url,
		name: value.name,
		mechanism: MechanismEnumToJSON(value.mechanism),
	};
}
