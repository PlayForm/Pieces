/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import {
	ReferencedAssetFromJSON,
	ReferencedAssetToJSON,
	type ReferencedAsset,
} from "./ReferencedAsset.tsx";
import {
	ReferencedConversationFromJSON,
	ReferencedConversationToJSON,
	type ReferencedConversation,
} from "./ReferencedConversation.tsx";

/**
 * This is currently only used within /assets/steam/identifiers && /conversations/steam/identifiers but can be used with other as well, if we want to expand this class.
 * @export
 * @interface StreamedIdentifier
 */
export interface StreamedIdentifier {
	/**
	 *
	 * @type {ReferencedAsset}
	 * @memberof StreamedIdentifier
	 */
	asset?: ReferencedAsset;
	/**
	 *
	 * @type {ReferencedConversation}
	 * @memberof StreamedIdentifier
	 */
	conversation?: ReferencedConversation;
	/**
	 * This is a specific bool that will let us know if we deleted an Identifierfrom the db.
	 * @type {boolean}
	 * @memberof StreamedIdentifier
	 */
	deleted?: boolean;
}

/**
 * Check if a given object implements the StreamedIdentifier interface.
 */
export function instanceOfStreamedIdentifier(_value: object): boolean {
	const isInstance = true;

	return isInstance;
}

export function StreamedIdentifierFromJSON(json: any): StreamedIdentifier {
	return StreamedIdentifierFromJSONTyped(json, false);
}

export function StreamedIdentifierFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): StreamedIdentifier {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		asset: exists(json, "asset")
			? ReferencedAssetFromJSON(json["asset"])
			: undefined,
		conversation: exists(json, "conversation")
			? ReferencedConversationFromJSON(json["conversation"])
			: undefined,
		deleted: exists(json, "deleted") ? json["deleted"] : undefined,
	};
}

export function StreamedIdentifierToJSON(
	value?: StreamedIdentifier | null,
): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		asset: ReferencedAssetToJSON(value.asset),
		conversation: ReferencedConversationToJSON(value.conversation),
		deleted: value.deleted,
	};
}
