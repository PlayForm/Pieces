/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime.ts";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
	type EmbeddedModelSchema,
} from "./EmbeddedModelSchema.tsx";
import {
	FlattenedAssetsFromJSON,
	FlattenedAssetsToJSON,
	type FlattenedAssets,
} from "./FlattenedAssets.tsx";
import {
	FlattenedConversationsFromJSON,
	FlattenedConversationsToJSON,
	type FlattenedConversations,
} from "./FlattenedConversations.tsx";
import {
	FlattenedPersonsFromJSON,
	FlattenedPersonsToJSON,
	type FlattenedPersons,
} from "./FlattenedPersons.tsx";
import {
	FlattenedWorkstreamSummariesFromJSON,
	FlattenedWorkstreamSummariesToJSON,
	type FlattenedWorkstreamSummaries,
} from "./FlattenedWorkstreamSummaries.tsx";
import {
	GroupedTimestampFromJSON,
	GroupedTimestampToJSON,
	type GroupedTimestamp,
} from "./GroupedTimestamp.tsx";
import {
	MechanismEnumFromJSON,
	MechanismEnumToJSON,
	type MechanismEnum,
} from "./MechanismEnum.tsx";
import { ScoreFromJSON, ScoreToJSON, type Score } from "./Score.tsx";

/**
 * This is a specific model for related websites to an asset.[DAG SAFE]
 * @export
 * @interface FlattenedWebsite
 */
export interface FlattenedWebsite {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof FlattenedWebsite
	 */
	schema?: EmbeddedModelSchema;
	/**
	 * this is aspecific uuid that represents
	 * @type {string}
	 * @memberof FlattenedWebsite
	 */
	id: string;
	/**
	 *
	 * @type {FlattenedAssets}
	 * @memberof FlattenedWebsite
	 */
	assets?: FlattenedAssets;
	/**
	 * A customizable name.
	 * @type {string}
	 * @memberof FlattenedWebsite
	 */
	name: string;
	/**
	 * The true url or the website.
	 * @type {string}
	 * @memberof FlattenedWebsite
	 */
	url: string;
	/**
	 *
	 * @type {GroupedTimestamp}
	 * @memberof FlattenedWebsite
	 */
	created: GroupedTimestamp;
	/**
	 *
	 * @type {GroupedTimestamp}
	 * @memberof FlattenedWebsite
	 */
	updated: GroupedTimestamp;
	/**
	 *
	 * @type {GroupedTimestamp}
	 * @memberof FlattenedWebsite
	 */
	deleted?: GroupedTimestamp;
	/**
	 * This is a Map<String, MechanismEnum> where the the key is an asset id.
	 * @type {{ [key: string]: MechanismEnum; }}
	 * @memberof FlattenedWebsite
	 */
	mechanisms?: { [key: string]: MechanismEnum };
	/**
	 * This is an optional value that will keep track of the number of times this has been interacted with.
	 * @type {number}
	 * @memberof FlattenedWebsite
	 */
	interactions?: number;
	/**
	 *
	 * @type {FlattenedPersons}
	 * @memberof FlattenedWebsite
	 */
	persons?: FlattenedPersons;
	/**
	 *
	 * @type {FlattenedConversations}
	 * @memberof FlattenedWebsite
	 */
	conversations?: FlattenedConversations;
	/**
	 *
	 * @type {Score}
	 * @memberof FlattenedWebsite
	 */
	score?: Score;
	/**
	 *
	 * @type {FlattenedWorkstreamSummaries}
	 * @memberof FlattenedWebsite
	 */
	summaries?: FlattenedWorkstreamSummaries;
}

/**
 * Check if a given object implements the FlattenedWebsite interface.
 */
export function instanceOfFlattenedWebsite(value: object): boolean {
	let isInstance = true;
	isInstance = isInstance && "id" in value;
	isInstance = isInstance && "name" in value;
	isInstance = isInstance && "url" in value;
	isInstance = isInstance && "created" in value;
	isInstance = isInstance && "updated" in value;

	return isInstance;
}

export function FlattenedWebsiteFromJSON(json: any): FlattenedWebsite {
	return FlattenedWebsiteFromJSONTyped(json, false);
}

export function FlattenedWebsiteFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): FlattenedWebsite {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		id: json["id"],
		assets: exists(json, "assets")
			? FlattenedAssetsFromJSON(json["assets"])
			: undefined,
		name: json["name"],
		url: json["url"],
		created: GroupedTimestampFromJSON(json["created"]),
		updated: GroupedTimestampFromJSON(json["updated"]),
		deleted: exists(json, "deleted")
			? GroupedTimestampFromJSON(json["deleted"])
			: undefined,
		mechanisms: exists(json, "mechanisms")
			? mapValues(json["mechanisms"], MechanismEnumFromJSON)
			: undefined,
		interactions: exists(json, "interactions")
			? json["interactions"]
			: undefined,
		persons: exists(json, "persons")
			? FlattenedPersonsFromJSON(json["persons"])
			: undefined,
		conversations: exists(json, "conversations")
			? FlattenedConversationsFromJSON(json["conversations"])
			: undefined,
		score: exists(json, "score") ? ScoreFromJSON(json["score"]) : undefined,
		summaries: exists(json, "summaries")
			? FlattenedWorkstreamSummariesFromJSON(json["summaries"])
			: undefined,
	};
}

export function FlattenedWebsiteToJSON(value?: FlattenedWebsite | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		id: value.id,
		assets: FlattenedAssetsToJSON(value.assets),
		name: value.name,
		url: value.url,
		created: GroupedTimestampToJSON(value.created),
		updated: GroupedTimestampToJSON(value.updated),
		deleted: GroupedTimestampToJSON(value.deleted),
		mechanisms:
			value.mechanisms === undefined
				? undefined
				: mapValues(value.mechanisms, MechanismEnumToJSON),
		interactions: value.interactions,
		persons: FlattenedPersonsToJSON(value.persons),
		conversations: FlattenedConversationsToJSON(value.conversations),
		score: ScoreToJSON(value.score),
		summaries: FlattenedWorkstreamSummariesToJSON(value.summaries),
	};
}
