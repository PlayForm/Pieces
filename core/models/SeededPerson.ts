/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
	type EmbeddedModelSchema,
} from "./EmbeddedModelSchema.tsx";
import {
	FlattenedAnchorsFromJSON,
	FlattenedAnchorsToJSON,
	type FlattenedAnchors,
} from "./FlattenedAnchors.tsx";
import {
	MechanismEnumFromJSON,
	MechanismEnumToJSON,
	type MechanismEnum,
} from "./MechanismEnum.tsx";
import {
	PersonAccessFromJSON,
	PersonAccessToJSON,
	type PersonAccess,
} from "./PersonAccess.tsx";
import {
	PersonModelFromJSON,
	PersonModelToJSON,
	type PersonModel,
} from "./PersonModel.tsx";
import {
	PersonTypeFromJSON,
	PersonTypeToJSON,
	type PersonType,
} from "./PersonType.tsx";
import {
	SeededAnnotationFromJSON,
	SeededAnnotationToJSON,
	type SeededAnnotation,
} from "./SeededAnnotation.tsx";

/**
 * This is a per-cursor to a full person.
 *
 * Will throw an error, if asset is passed in but acces.scope is undefined.
 *
 * can optionally pass in our mechanism here, as the default will be manual unless specified.
 *
 * TODO consider updating these asset, format to referenced Models
 *
 * Note: model, access, mechanism will only be added if the asset is passed in.
 * @export
 * @interface SeededPerson
 */
export interface SeededPerson {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof SeededPerson
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {string}
	 * @memberof SeededPerson
	 */
	asset?: string;
	/**
	 *
	 * @type {MechanismEnum}
	 * @memberof SeededPerson
	 */
	mechanism?: MechanismEnum;
	/**
	 *
	 * @type {PersonAccess}
	 * @memberof SeededPerson
	 */
	access?: PersonAccess;
	/**
	 *
	 * @type {PersonType}
	 * @memberof SeededPerson
	 */
	type: PersonType;
	/**
	 *
	 * @type {PersonModel}
	 * @memberof SeededPerson
	 */
	model?: PersonModel;
	/**
	 *
	 * @type {Array<SeededAnnotation>}
	 * @memberof SeededPerson
	 */
	annotations?: SeededAnnotation[];
	/**
	 *
	 * @type {FlattenedAnchors}
	 * @memberof SeededPerson
	 */
	anchors?: FlattenedAnchors;
}

/**
 * Check if a given object implements the SeededPerson interface.
 */
export function instanceOfSeededPerson(value: object): boolean {
	let isInstance = true;
	isInstance = isInstance && "type" in value;

	return isInstance;
}

export function SeededPersonFromJSON(json: any): SeededPerson {
	return SeededPersonFromJSONTyped(json, false);
}

export function SeededPersonFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): SeededPerson {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		asset: exists(json, "asset") ? json["asset"] : undefined,
		mechanism: exists(json, "mechanism")
			? MechanismEnumFromJSON(json["mechanism"])
			: undefined,
		access: exists(json, "access")
			? PersonAccessFromJSON(json["access"])
			: undefined,
		type: PersonTypeFromJSON(json["type"]),
		model: exists(json, "model")
			? PersonModelFromJSON(json["model"])
			: undefined,
		annotations: exists(json, "annotations")
			? (json["annotations"] as any[]).map(SeededAnnotationFromJSON)
			: undefined,
		anchors: exists(json, "anchors")
			? FlattenedAnchorsFromJSON(json["anchors"])
			: undefined,
	};
}

export function SeededPersonToJSON(value?: SeededPerson | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		asset: value.asset,
		mechanism: MechanismEnumToJSON(value.mechanism),
		access: PersonAccessToJSON(value.access),
		type: PersonTypeToJSON(value.type),
		model: PersonModelToJSON(value.model),
		annotations:
			value.annotations === undefined
				? undefined
				: (value.annotations as any[]).map(SeededAnnotationToJSON),
		anchors: FlattenedAnchorsToJSON(value.anchors),
	};
}
