/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
	type EmbeddedModelSchema,
} from "./EmbeddedModelSchema.tsx";
import {
	GroupedTimestampFromJSON,
	GroupedTimestampToJSON,
	type GroupedTimestamp,
} from "./GroupedTimestamp.tsx";
import {
	PersonAccessScopedEnumFromJSON,
	PersonAccessScopedEnumToJSON,
	type PersonAccessScopedEnum,
} from "./PersonAccessScopedEnum.tsx";

/**
 * if scoped is provided will let us know what level of permission(access) this specific person has in relation to what scope.(collection, asset,...etc)
 *
 * in the future will expand to global (with its own enumeration for a global entire project/cloud scope)
 * @export
 * @interface PersonAccess
 */
export interface PersonAccess {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof PersonAccess
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {PersonAccessScopedEnum}
	 * @memberof PersonAccess
	 */
	scoped?: PersonAccessScopedEnum;
	/**
	 *
	 * @type {GroupedTimestamp}
	 * @memberof PersonAccess
	 */
	deleted?: GroupedTimestamp;
}

/**
 * Check if a given object implements the PersonAccess interface.
 */
export function instanceOfPersonAccess(_value: object): boolean {
	const isInstance = true;

	return isInstance;
}

export function PersonAccessFromJSON(json: any): PersonAccess {
	return PersonAccessFromJSONTyped(json, false);
}

export function PersonAccessFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): PersonAccess {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		scoped: exists(json, "scoped")
			? PersonAccessScopedEnumFromJSON(json["scoped"])
			: undefined,
		deleted: exists(json, "deleted")
			? GroupedTimestampFromJSON(json["deleted"])
			: undefined,
	};
}

export function PersonAccessToJSON(value?: PersonAccess | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		scoped: PersonAccessScopedEnumToJSON(value.scoped),
		deleted: GroupedTimestampToJSON(value.deleted),
	};
}
