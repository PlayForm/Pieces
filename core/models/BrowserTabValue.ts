/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import {
	BrowserSelectionFromJSON,
	BrowserSelectionToJSON,
	type BrowserSelection,
} from "./BrowserSelection.tsx";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
	type EmbeddedModelSchema,
} from "./EmbeddedModelSchema.tsx";
import {
	TransferableStringFromJSON,
	TransferableStringToJSON,
	type TransferableString,
} from "./TransferableString.tsx";

/**
 * snippet: these are extracted code blocks
 * selection: here is a copy/paste/selection
 *
 * note: recommended that you pass in the md version of the webpage
 *
 * note: please dont pass in all three html,md,text, just pass in 1.
 * @export
 * @interface BrowserTabValue
 */
export interface BrowserTabValue {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof BrowserTabValue
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {TransferableString}
	 * @memberof BrowserTabValue
	 */
	html?: TransferableString;
	/**
	 *
	 * @type {TransferableString}
	 * @memberof BrowserTabValue
	 */
	md?: TransferableString;
	/**
	 *
	 * @type {TransferableString}
	 * @memberof BrowserTabValue
	 */
	text?: TransferableString;
	/**
	 *
	 * @type {BrowserSelection}
	 * @memberof BrowserTabValue
	 */
	snippet?: BrowserSelection;
	/**
	 *
	 * @type {BrowserSelection}
	 * @memberof BrowserTabValue
	 */
	selection?: BrowserSelection;
}

/**
 * Check if a given object implements the BrowserTabValue interface.
 */
export function instanceOfBrowserTabValue(_value: object): boolean {
	const isInstance = true;

	return isInstance;
}

export function BrowserTabValueFromJSON(json: any): BrowserTabValue {
	return BrowserTabValueFromJSONTyped(json, false);
}

export function BrowserTabValueFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): BrowserTabValue {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		html: exists(json, "html")
			? TransferableStringFromJSON(json["html"])
			: undefined,
		md: exists(json, "md")
			? TransferableStringFromJSON(json["md"])
			: undefined,
		text: exists(json, "text")
			? TransferableStringFromJSON(json["text"])
			: undefined,
		snippet: exists(json, "snippet")
			? BrowserSelectionFromJSON(json["snippet"])
			: undefined,
		selection: exists(json, "selection")
			? BrowserSelectionFromJSON(json["selection"])
			: undefined,
	};
}

export function BrowserTabValueToJSON(value?: BrowserTabValue | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		html: TransferableStringToJSON(value.html),
		md: TransferableStringToJSON(value.md),
		text: TransferableStringToJSON(value.text),
		snippet: BrowserSelectionToJSON(value.snippet),
		selection: BrowserSelectionToJSON(value.selection),
	};
}
