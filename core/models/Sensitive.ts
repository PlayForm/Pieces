/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import type { EmbeddedModelSchema } from "./EmbeddedModelSchema.tsx";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
} from "./EmbeddedModelSchema.tsx";
import type { FlattenedAsset } from "./FlattenedAsset.tsx";
import {
	FlattenedAssetFromJSON,
	FlattenedAssetToJSON,
} from "./FlattenedAsset.tsx";
import type { GroupedTimestamp } from "./GroupedTimestamp.tsx";
import {
	GroupedTimestampFromJSON,
	GroupedTimestampToJSON,
} from "./GroupedTimestamp.tsx";
import type { MechanismEnum } from "./MechanismEnum.tsx";
import {
	MechanismEnumFromJSON,
	MechanismEnumToJSON,
} from "./MechanismEnum.tsx";
import type { Score } from "./Score.tsx";
import { ScoreFromJSON, ScoreToJSON } from "./Score.tsx";
import type { SensitiveCategoryEnum } from "./SensitiveCategoryEnum.tsx";
import {
	SensitiveCategoryEnumFromJSON,
	SensitiveCategoryEnumToJSON,
} from "./SensitiveCategoryEnum.tsx";
import type { SensitiveMetadata } from "./SensitiveMetadata.tsx";
import {
	SensitiveMetadataFromJSON,
	SensitiveMetadataToJSON,
} from "./SensitiveMetadata.tsx";
import type { SensitiveSeverityEnum } from "./SensitiveSeverityEnum.tsx";
import {
	SensitiveSeverityEnumFromJSON,
	SensitiveSeverityEnumToJSON,
} from "./SensitiveSeverityEnum.tsx";

/**
 * This is a fully referenced representation of a sensitive pieces of data.
 * @export
 * @interface Sensitive
 */
export interface Sensitive {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof Sensitive
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {string}
	 * @memberof Sensitive
	 */
	id: string;
	/**
	 *
	 * @type {GroupedTimestamp}
	 * @memberof Sensitive
	 */
	created: GroupedTimestamp;
	/**
	 *
	 * @type {GroupedTimestamp}
	 * @memberof Sensitive
	 */
	updated: GroupedTimestamp;
	/**
	 *
	 * @type {GroupedTimestamp}
	 * @memberof Sensitive
	 */
	deleted?: GroupedTimestamp;
	/**
	 *
	 * @type {FlattenedAsset}
	 * @memberof Sensitive
	 */
	asset: FlattenedAsset;
	/**
	 *
	 * @type {string}
	 * @memberof Sensitive
	 */
	text: string;
	/**
	 *
	 * @type {MechanismEnum}
	 * @memberof Sensitive
	 */
	mechanism: MechanismEnum;
	/**
	 *
	 * @type {SensitiveCategoryEnum}
	 * @memberof Sensitive
	 */
	category: SensitiveCategoryEnum;
	/**
	 *
	 * @type {SensitiveSeverityEnum}
	 * @memberof Sensitive
	 */
	severity: SensitiveSeverityEnum;
	/**
	 *
	 * @type {string}
	 * @memberof Sensitive
	 */
	name: string;
	/**
	 *
	 * @type {string}
	 * @memberof Sensitive
	 */
	description: string;
	/**
	 *
	 * @type {SensitiveMetadata}
	 * @memberof Sensitive
	 */
	metadata?: SensitiveMetadata;
	/**
	 * This is an optional value that will keep track of the number of times this has been interacted with.
	 * @type {number}
	 * @memberof Sensitive
	 */
	interactions?: number;
	/**
	 *
	 * @type {Score}
	 * @memberof Sensitive
	 */
	score?: Score;
}

/**
 * Check if a given object implements the Sensitive interface.
 */
export function instanceOfSensitive(value: object): boolean {
	let isInstance = true;
	isInstance = isInstance && "id" in value;
	isInstance = isInstance && "created" in value;
	isInstance = isInstance && "updated" in value;
	isInstance = isInstance && "asset" in value;
	isInstance = isInstance && "text" in value;
	isInstance = isInstance && "mechanism" in value;
	isInstance = isInstance && "category" in value;
	isInstance = isInstance && "severity" in value;
	isInstance = isInstance && "name" in value;
	isInstance = isInstance && "description" in value;

	return isInstance;
}

export function SensitiveFromJSON(json: any): Sensitive {
	return SensitiveFromJSONTyped(json, false);
}

export function SensitiveFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): Sensitive {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		id: json["id"],
		created: GroupedTimestampFromJSON(json["created"]),
		updated: GroupedTimestampFromJSON(json["updated"]),
		deleted: exists(json, "deleted")
			? GroupedTimestampFromJSON(json["deleted"])
			: undefined,
		asset: FlattenedAssetFromJSON(json["asset"]),
		text: json["text"],
		mechanism: MechanismEnumFromJSON(json["mechanism"]),
		category: SensitiveCategoryEnumFromJSON(json["category"]),
		severity: SensitiveSeverityEnumFromJSON(json["severity"]),
		name: json["name"],
		description: json["description"],
		metadata: exists(json, "metadata")
			? SensitiveMetadataFromJSON(json["metadata"])
			: undefined,
		interactions: exists(json, "interactions")
			? json["interactions"]
			: undefined,
		score: exists(json, "score") ? ScoreFromJSON(json["score"]) : undefined,
	};
}

export function SensitiveToJSON(value?: Sensitive | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		id: value.id,
		created: GroupedTimestampToJSON(value.created),
		updated: GroupedTimestampToJSON(value.updated),
		deleted: GroupedTimestampToJSON(value.deleted),
		asset: FlattenedAssetToJSON(value.asset),
		text: value.text,
		mechanism: MechanismEnumToJSON(value.mechanism),
		category: SensitiveCategoryEnumToJSON(value.category),
		severity: SensitiveSeverityEnumToJSON(value.severity),
		name: value.name,
		description: value.description,
		metadata: SensitiveMetadataToJSON(value.metadata),
		interactions: value.interactions,
		score: ScoreToJSON(value.score),
	};
}
