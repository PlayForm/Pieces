/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import type { EmbeddedModelSchema } from "./EmbeddedModelSchema.tsx";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
} from "./EmbeddedModelSchema.tsx";
import type { Score } from "./Score.tsx";
import { ScoreFromJSON, ScoreToJSON } from "./Score.tsx";
import type { WorkstreamEvent } from "./WorkstreamEvent.tsx";
import {
	WorkstreamEventFromJSON,
	WorkstreamEventToJSON,
} from "./WorkstreamEvent.tsx";

/**
 * This is a collection of many Shadow Activity events.
 * @export
 * @interface WorkstreamEvents
 */
export interface WorkstreamEvents {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof WorkstreamEvents
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {Array<WorkstreamEvent>}
	 * @memberof WorkstreamEvents
	 */
	iterable: WorkstreamEvent[];
	/**
	 * This is a Map<String, int> where the the key is an activity id.
	 * @type {{ [key: string]: number; }}
	 * @memberof WorkstreamEvents
	 */
	indices?: { [key: string]: number };
	/**
	 *
	 * @type {Score}
	 * @memberof WorkstreamEvents
	 */
	score?: Score;
}

/**
 * Check if a given object implements the WorkstreamEvents interface.
 */
export function instanceOfWorkstreamEvents(value: object): boolean {
	let isInstance = true;
	isInstance = isInstance && "iterable" in value;

	return isInstance;
}

export function WorkstreamEventsFromJSON(json: any): WorkstreamEvents {
	return WorkstreamEventsFromJSONTyped(json, false);
}

export function WorkstreamEventsFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): WorkstreamEvents {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		iterable: (json["iterable"] as any[]).map(WorkstreamEventFromJSON),
		indices: exists(json, "indices") ? json["indices"] : undefined,
		score: exists(json, "score") ? ScoreFromJSON(json["score"]) : undefined,
	};
}

export function WorkstreamEventsToJSON(value?: WorkstreamEvents | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		iterable: (value.iterable as any[]).map(WorkstreamEventToJSON),
		indices: value.indices,
		score: ScoreToJSON(value.score),
	};
}
