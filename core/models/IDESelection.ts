/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import {
	ClassificationFromJSON,
	ClassificationToJSON,
	type Classification,
} from "./Classification.tsx";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
	type EmbeddedModelSchema,
} from "./EmbeddedModelSchema.tsx";
import {
	LanguageServerProtocolLocationFromJSON,
	LanguageServerProtocolLocationToJSON,
	type LanguageServerProtocolLocation,
} from "./LanguageServerProtocolLocation.tsx";
import {
	TransferableStringFromJSON,
	TransferableStringToJSON,
	type TransferableString,
} from "./TransferableString.tsx";

/**
 * This is a given bit of text/code that is selected in the IDE, this can be a copy/paste/selection
 *
 * location: this is the given location provided by the LSP(might need to be a different object we will see)
 * @export
 * @interface IDESelection
 */
export interface IDESelection {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof IDESelection
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {LanguageServerProtocolLocation}
	 * @memberof IDESelection
	 */
	location?: LanguageServerProtocolLocation;
	/**
	 *
	 * @type {Classification}
	 * @memberof IDESelection
	 */
	classification?: Classification;
	/**
	 *
	 * @type {TransferableString}
	 * @memberof IDESelection
	 */
	value?: TransferableString;
}

/**
 * Check if a given object implements the IDESelection interface.
 */
export function instanceOfIDESelection(_value: object): boolean {
	const isInstance = true;

	return isInstance;
}

export function IDESelectionFromJSON(json: any): IDESelection {
	return IDESelectionFromJSONTyped(json, false);
}

export function IDESelectionFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): IDESelection {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		location: exists(json, "location")
			? LanguageServerProtocolLocationFromJSON(json["location"])
			: undefined,
		classification: exists(json, "classification")
			? ClassificationFromJSON(json["classification"])
			: undefined,
		value: exists(json, "value")
			? TransferableStringFromJSON(json["value"])
			: undefined,
	};
}

export function IDESelectionToJSON(value?: IDESelection | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		location: LanguageServerProtocolLocationToJSON(value.location),
		classification: ClassificationToJSON(value.classification),
		value: TransferableStringToJSON(value.value),
	};
}
