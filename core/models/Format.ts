/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import {
	ActivitiesFromJSON,
	ActivitiesToJSON,
	type Activities,
} from "./Activities.tsx";
import {
	AnalysisFromJSON,
	AnalysisToJSON,
	type Analysis,
} from "./Analysis.tsx";
import {
	ApplicationFromJSON,
	ApplicationToJSON,
	type Application,
} from "./Application.tsx";
import {
	ByteDescriptorFromJSON,
	ByteDescriptorToJSON,
	type ByteDescriptor,
} from "./ByteDescriptor.tsx";
import {
	ClassificationFromJSON,
	ClassificationToJSON,
	type Classification,
} from "./Classification.tsx";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
	type EmbeddedModelSchema,
} from "./EmbeddedModelSchema.tsx";
import {
	FileFormatFromJSON,
	FileFormatToJSON,
	type FileFormat,
} from "./FileFormat.tsx";
import {
	FlattenedAssetFromJSON,
	FlattenedAssetToJSON,
	type FlattenedAsset,
} from "./FlattenedAsset.tsx";
import {
	FragmentFormatFromJSON,
	FragmentFormatToJSON,
	type FragmentFormat,
} from "./FragmentFormat.tsx";
import {
	GroupedTimestampFromJSON,
	GroupedTimestampToJSON,
	type GroupedTimestamp,
} from "./GroupedTimestamp.tsx";
import {
	RelationshipFromJSON,
	RelationshipToJSON,
	type Relationship,
} from "./Relationship.tsx";
import { RoleFromJSON, RoleToJSON, type Role } from "./Role.tsx";

/**
 * A representation of Data for a particular Form Factor of an Asset.
 *
 * Below asset HAS to be Flattened because it is a leaf node and must prevent cycles agressively.
 * @export
 * @interface Format
 */
export interface Format {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof Format
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {string}
	 * @memberof Format
	 */
	id: string;
	/**
	 *
	 * @type {string}
	 * @memberof Format
	 */
	creator: string;
	/**
	 *
	 * @type {Classification}
	 * @memberof Format
	 */
	classification: Classification;
	/**
	 *
	 * @type {string}
	 * @memberof Format
	 */
	icon?: string;
	/**
	 *
	 * @type {Role}
	 * @memberof Format
	 */
	role: Role;
	/**
	 *
	 * @type {Application}
	 * @memberof Format
	 */
	application: Application;
	/**
	 *
	 * @type {FlattenedAsset}
	 * @memberof Format
	 */
	asset: FlattenedAsset;
	/**
	 *
	 * @type {ByteDescriptor}
	 * @memberof Format
	 */
	bytes: ByteDescriptor;
	/**
	 *
	 * @type {GroupedTimestamp}
	 * @memberof Format
	 */
	created: GroupedTimestamp;
	/**
	 *
	 * @type {GroupedTimestamp}
	 * @memberof Format
	 */
	updated: GroupedTimestamp;
	/**
	 *
	 * @type {GroupedTimestamp}
	 * @memberof Format
	 */
	deleted?: GroupedTimestamp;
	/**
	 *
	 * @type {GroupedTimestamp}
	 * @memberof Format
	 */
	synced?: GroupedTimestamp;
	/**
	 * This is a path used to determine what path this format lives at within the cloud.
	 * @type {string}
	 * @memberof Format
	 */
	cloud?: string;
	/**
	 *
	 * @type {FragmentFormat}
	 * @memberof Format
	 */
	fragment?: FragmentFormat;
	/**
	 *
	 * @type {FileFormat}
	 * @memberof Format
	 */
	file?: FileFormat;
	/**
	 *
	 * @type {Analysis}
	 * @memberof Format
	 */
	analysis?: Analysis;
	/**
	 *
	 * @type {Relationship}
	 * @memberof Format
	 */
	relationship?: Relationship;
	/**
	 *
	 * @type {Activities}
	 * @memberof Format
	 */
	activities?: Activities;
}

/**
 * Check if a given object implements the Format interface.
 */
export function instanceOfFormat(value: object): boolean {
	let isInstance = true;
	isInstance = isInstance && "id" in value;
	isInstance = isInstance && "creator" in value;
	isInstance = isInstance && "classification" in value;
	isInstance = isInstance && "role" in value;
	isInstance = isInstance && "application" in value;
	isInstance = isInstance && "asset" in value;
	isInstance = isInstance && "bytes" in value;
	isInstance = isInstance && "created" in value;
	isInstance = isInstance && "updated" in value;

	return isInstance;
}

export function FormatFromJSON(json: any): Format {
	return FormatFromJSONTyped(json, false);
}

export function FormatFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): Format {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		id: json["id"],
		creator: json["creator"],
		classification: ClassificationFromJSON(json["classification"]),
		icon: exists(json, "icon") ? json["icon"] : undefined,
		role: RoleFromJSON(json["role"]),
		application: ApplicationFromJSON(json["application"]),
		asset: FlattenedAssetFromJSON(json["asset"]),
		bytes: ByteDescriptorFromJSON(json["bytes"]),
		created: GroupedTimestampFromJSON(json["created"]),
		updated: GroupedTimestampFromJSON(json["updated"]),
		deleted: exists(json, "deleted")
			? GroupedTimestampFromJSON(json["deleted"])
			: undefined,
		synced: exists(json, "synced")
			? GroupedTimestampFromJSON(json["synced"])
			: undefined,
		cloud: exists(json, "cloud") ? json["cloud"] : undefined,
		fragment: exists(json, "fragment")
			? FragmentFormatFromJSON(json["fragment"])
			: undefined,
		file: exists(json, "file")
			? FileFormatFromJSON(json["file"])
			: undefined,
		analysis: exists(json, "analysis")
			? AnalysisFromJSON(json["analysis"])
			: undefined,
		relationship: exists(json, "relationship")
			? RelationshipFromJSON(json["relationship"])
			: undefined,
		activities: exists(json, "activities")
			? ActivitiesFromJSON(json["activities"])
			: undefined,
	};
}

export function FormatToJSON(value?: Format | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		id: value.id,
		creator: value.creator,
		classification: ClassificationToJSON(value.classification),
		icon: value.icon,
		role: RoleToJSON(value.role),
		application: ApplicationToJSON(value.application),
		asset: FlattenedAssetToJSON(value.asset),
		bytes: ByteDescriptorToJSON(value.bytes),
		created: GroupedTimestampToJSON(value.created),
		updated: GroupedTimestampToJSON(value.updated),
		deleted: GroupedTimestampToJSON(value.deleted),
		synced: GroupedTimestampToJSON(value.synced),
		cloud: value.cloud,
		fragment: FragmentFormatToJSON(value.fragment),
		file: FileFormatToJSON(value.file),
		analysis: AnalysisToJSON(value.analysis),
		relationship: RelationshipToJSON(value.relationship),
		activities: ActivitiesToJSON(value.activities),
	};
}
