/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
	type EmbeddedModelSchema,
} from "./EmbeddedModelSchema.tsx";
import {
	SeededAnchorFromJSON,
	SeededAnchorToJSON,
	type SeededAnchor,
} from "./SeededAnchor.tsx";
import {
	SeededAssetFromJSON,
	SeededAssetToJSON,
	type SeededAsset,
} from "./SeededAsset.tsx";
import {
	SeededPersonFromJSON,
	SeededPersonToJSON,
	type SeededPerson,
} from "./SeededPerson.tsx";
import {
	SeededWebsiteFromJSON,
	SeededWebsiteToJSON,
	type SeededWebsite,
} from "./SeededWebsite.tsx";

/**
 * A seed Model used to wrap a format or asset
 *
 * Note: we will expand this now to support additional paramerters.
 *
 * Note: however if create an asset, only pass in the asset, not passing in an asset in this case will cause the endpoint to fail.
 *
 * TODO: for a breaking change update the type enum here to add support for the additional materials or remove it entirely.
 * @export
 * @interface Seed
 */
export interface Seed {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof Seed
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {SeededAsset}
	 * @memberof Seed
	 */
	asset?: SeededAsset;
	/**
	 *
	 * @type {SeededPerson}
	 * @memberof Seed
	 */
	person?: SeededPerson;
	/**
	 *
	 * @type {SeededAnchor}
	 * @memberof Seed
	 */
	anchor?: SeededAnchor;
	/**
	 *
	 * @type {SeededWebsite}
	 * @memberof Seed
	 */
	website?: SeededWebsite;
	/**
	 *
	 * @type {string}
	 * @memberof Seed
	 */
	type?: SeedTypeEnum;
}

/**
 * @export
 */
export const SeedTypeEnum = {
	Format: "SEEDED_FORMAT",
	Asset: "SEEDED_ASSET",
} as const;
export type SeedTypeEnum = (typeof SeedTypeEnum)[keyof typeof SeedTypeEnum];

/**
 * Check if a given object implements the Seed interface.
 */
export function instanceOfSeed(_value: object): boolean {
	const isInstance = true;

	return isInstance;
}

export function SeedFromJSON(json: any): Seed {
	return SeedFromJSONTyped(json, false);
}

export function SeedFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): Seed {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		asset: exists(json, "asset")
			? SeededAssetFromJSON(json["asset"])
			: undefined,
		person: exists(json, "person")
			? SeededPersonFromJSON(json["person"])
			: undefined,
		anchor: exists(json, "anchor")
			? SeededAnchorFromJSON(json["anchor"])
			: undefined,
		website: exists(json, "website")
			? SeededWebsiteFromJSON(json["website"])
			: undefined,
		type: exists(json, "type") ? json["type"] : undefined,
	};
}

export function SeedToJSON(value?: Seed | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		asset: SeededAssetToJSON(value.asset),
		person: SeededPersonToJSON(value.person),
		anchor: SeededAnchorToJSON(value.anchor),
		website: SeededWebsiteToJSON(value.website),
		type: value.type,
	};
}
