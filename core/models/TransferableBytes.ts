/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
	type EmbeddedModelSchema,
} from "./EmbeddedModelSchema.tsx";

/**
 * Bytes is a Model for A FileFormat. Raw and file are the only 2 that are currently supported. Raw and file are an array of integers that represent the file.Typical conversion UTF8 -> array[int] or UTF8 -> array[bytes(in hexidecimal)] -> array[int]. Either way you convert is up to you but the type we need here is an array of integers.
 *
 * [NOT IMPLEMENTED] base64, base64_url, data_url
 * [IMPLEMENTED] raw
 * @export
 * @interface TransferableBytes
 */
export interface TransferableBytes {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof TransferableBytes
	 */
	schema?: EmbeddedModelSchema;
	/**
	 * IMPLEMENTED
	 * @type {Array<number>}
	 * @memberof TransferableBytes
	 */
	raw?: number[];
	/**
	 * NOT IMPLEMENTED
	 * @type {Array<number>}
	 * @memberof TransferableBytes
	 */
	base64?: number[];
	/**
	 * NOT IMPLEMENTED
	 * @type {Array<number>}
	 * @memberof TransferableBytes
	 */
	base64Url?: number[];
	/**
	 * NOT IMPLEMENTED
	 * @type {Array<number>}
	 * @memberof TransferableBytes
	 */
	dataUrl?: number[];
}

/**
 * Check if a given object implements the TransferableBytes interface.
 */
export function instanceOfTransferableBytes(_value: object): boolean {
	const isInstance = true;

	return isInstance;
}

export function TransferableBytesFromJSON(json: any): TransferableBytes {
	return TransferableBytesFromJSONTyped(json, false);
}

export function TransferableBytesFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): TransferableBytes {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		raw: exists(json, "raw") ? json["raw"] : undefined,
		base64: exists(json, "base64") ? json["base64"] : undefined,
		base64Url: exists(json, "base64_url") ? json["base64_url"] : undefined,
		dataUrl: exists(json, "data_url") ? json["data_url"] : undefined,
	};
}

export function TransferableBytesToJSON(value?: TransferableBytes | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		raw: value.raw,
		base64: value.base64,
		base64_url: value.base64Url,
		data_url: value.dataUrl,
	};
}
