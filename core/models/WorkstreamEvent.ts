/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import {
	ApplicationFromJSON,
	ApplicationToJSON,
	type Application,
} from "./Application.tsx";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
	type EmbeddedModelSchema,
} from "./EmbeddedModelSchema.tsx";
import {
	FlattenedWorkstreamSummariesFromJSON,
	FlattenedWorkstreamSummariesToJSON,
	type FlattenedWorkstreamSummaries,
} from "./FlattenedWorkstreamSummaries.tsx";
import {
	GroupedTimestampFromJSON,
	GroupedTimestampToJSON,
	type GroupedTimestamp,
} from "./GroupedTimestamp.tsx";
import { ScoreFromJSON, ScoreToJSON, type Score } from "./Score.tsx";
import {
	WorkstreamEventContextFromJSON,
	WorkstreamEventContextToJSON,
	type WorkstreamEventContext,
} from "./WorkstreamEventContext.tsx";
import {
	WorkstreamEventTriggerFromJSON,
	WorkstreamEventTriggerToJSON,
	type WorkstreamEventTrigger,
} from "./WorkstreamEventTrigger.tsx";

/**
 * This is a Shadow Activity event:
 *
 * This is used to for 2 collections the internal Shadow Activity collection and the Shadow Activity Collection.
 *
 * The Internal Shadow Activity will me just a massive growing and shrinkling persisted list activity event that will endup getting rolled up into Workstream summaries. When we roll up the internalWorkstreamEvent events we will do a ton of filtering and only take the highly relevant events and turn them into WorkstreamEvent (these will be used to create a reference to the workstream summary, so we can know what event were used to generate the summary and vise versa).
 *
 * A Shadow Activity model is a collection of a ton of small interactions with the plugins (copy/paste/file open/file close/tab changed/...etc events) that will also enable use to know what materials are being used to funnel them into our engine to show highly relevant data according to your given flow.
 * @export
 * @interface WorkstreamEvent
 */
export interface WorkstreamEvent {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof WorkstreamEvent
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {string}
	 * @memberof WorkstreamEvent
	 */
	id: string;
	/**
	 *
	 * @type {Score}
	 * @memberof WorkstreamEvent
	 */
	score?: Score;
	/**
	 *
	 * @type {Application}
	 * @memberof WorkstreamEvent
	 */
	application: Application;
	/**
	 *
	 * @type {GroupedTimestamp}
	 * @memberof WorkstreamEvent
	 */
	created: GroupedTimestamp;
	/**
	 *
	 * @type {GroupedTimestamp}
	 * @memberof WorkstreamEvent
	 */
	updated: GroupedTimestamp;
	/**
	 *
	 * @type {WorkstreamEventTrigger}
	 * @memberof WorkstreamEvent
	 */
	trigger: WorkstreamEventTrigger;
	/**
	 *
	 * @type {WorkstreamEventContext}
	 * @memberof WorkstreamEvent
	 */
	context?: WorkstreamEventContext;
	/**
	 *
	 * @type {FlattenedWorkstreamSummaries}
	 * @memberof WorkstreamEvent
	 */
	summaries?: FlattenedWorkstreamSummaries;
}

/**
 * Check if a given object implements the WorkstreamEvent interface.
 */
export function instanceOfWorkstreamEvent(value: object): boolean {
	let isInstance = true;
	isInstance = isInstance && "id" in value;
	isInstance = isInstance && "application" in value;
	isInstance = isInstance && "created" in value;
	isInstance = isInstance && "updated" in value;
	isInstance = isInstance && "trigger" in value;

	return isInstance;
}

export function WorkstreamEventFromJSON(json: any): WorkstreamEvent {
	return WorkstreamEventFromJSONTyped(json, false);
}

export function WorkstreamEventFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): WorkstreamEvent {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		id: json["id"],
		score: exists(json, "score") ? ScoreFromJSON(json["score"]) : undefined,
		application: ApplicationFromJSON(json["application"]),
		created: GroupedTimestampFromJSON(json["created"]),
		updated: GroupedTimestampFromJSON(json["updated"]),
		trigger: WorkstreamEventTriggerFromJSON(json["trigger"]),
		context: exists(json, "context")
			? WorkstreamEventContextFromJSON(json["context"])
			: undefined,
		summaries: exists(json, "summaries")
			? FlattenedWorkstreamSummariesFromJSON(json["summaries"])
			: undefined,
	};
}

export function WorkstreamEventToJSON(value?: WorkstreamEvent | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		id: value.id,
		score: ScoreToJSON(value.score),
		application: ApplicationToJSON(value.application),
		created: GroupedTimestampToJSON(value.created),
		updated: GroupedTimestampToJSON(value.updated),
		trigger: WorkstreamEventTriggerToJSON(value.trigger),
		context: WorkstreamEventContextToJSON(value.context),
		summaries: FlattenedWorkstreamSummariesToJSON(value.summaries),
	};
}
