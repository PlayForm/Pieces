/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
	type EmbeddedModelSchema,
} from "./EmbeddedModelSchema.tsx";
import {
	GroupedTimestampFromJSON,
	GroupedTimestampToJSON,
	type GroupedTimestamp,
} from "./GroupedTimestamp.tsx";
import {
	WindowDimensionsFromJSON,
	WindowDimensionsToJSON,
	type WindowDimensions,
} from "./WindowDimensions.tsx";

/**
 * This model is used for the dimensions of the copilot/feed/xyz window.
 *
 * if dimensions/captured are null this means we do not have the dimensions for this given window.
 *
 * TODO: consider adding 5 markers here for the qr codes(ie location of these as wel)
 * NOTE: will want to add type of calibration for this specific dimension(ie copilot/feed/xyz)
 * @export
 * @interface WorkstreamPatternEngineVisionCalibration
 */
export interface WorkstreamPatternEngineVisionCalibration {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof WorkstreamPatternEngineVisionCalibration
	 */
	schema?: EmbeddedModelSchema;
	/**
	 * This is the name of the window(foreground window).(this will always be present)
	 * @type {string}
	 * @memberof WorkstreamPatternEngineVisionCalibration
	 */
	foreground: string;
	/**
	 *
	 * @type {GroupedTimestamp}
	 * @memberof WorkstreamPatternEngineVisionCalibration
	 */
	captured?: GroupedTimestamp;
	/**
	 *
	 * @type {WindowDimensions}
	 * @memberof WorkstreamPatternEngineVisionCalibration
	 */
	dimensions?: WindowDimensions;
}

/**
 * Check if a given object implements the WorkstreamPatternEngineVisionCalibration interface.
 */
export function instanceOfWorkstreamPatternEngineVisionCalibration(
	value: object,
): boolean {
	let isInstance = true;
	isInstance = isInstance && "foreground" in value;

	return isInstance;
}

export function WorkstreamPatternEngineVisionCalibrationFromJSON(
	json: any,
): WorkstreamPatternEngineVisionCalibration {
	return WorkstreamPatternEngineVisionCalibrationFromJSONTyped(json, false);
}

export function WorkstreamPatternEngineVisionCalibrationFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): WorkstreamPatternEngineVisionCalibration {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		foreground: json["foreground"],
		captured: exists(json, "captured")
			? GroupedTimestampFromJSON(json["captured"])
			: undefined,
		dimensions: exists(json, "dimensions")
			? WindowDimensionsFromJSON(json["dimensions"])
			: undefined,
	};
}

export function WorkstreamPatternEngineVisionCalibrationToJSON(
	value?: WorkstreamPatternEngineVisionCalibration | null,
): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		foreground: value.foreground,
		captured: GroupedTimestampToJSON(value.captured),
		dimensions: WindowDimensionsToJSON(value.dimensions),
	};
}
