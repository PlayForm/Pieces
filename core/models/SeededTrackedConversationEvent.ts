/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import type { EmbeddedModelSchema } from "./EmbeddedModelSchema.tsx";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
} from "./EmbeddedModelSchema.tsx";
import type { ReferencedConversation } from "./ReferencedConversation.tsx";
import {
	ReferencedConversationFromJSON,
	ReferencedConversationToJSON,
} from "./ReferencedConversation.tsx";
import type { TrackedConversationEventIdentifierDescriptionPairs } from "./TrackedConversationEventIdentifierDescriptionPairs.tsx";
import {
	TrackedConversationEventIdentifierDescriptionPairsFromJSON,
	TrackedConversationEventIdentifierDescriptionPairsToJSON,
} from "./TrackedConversationEventIdentifierDescriptionPairs.tsx";
import type { TrackedConversationEventMetadata } from "./TrackedConversationEventMetadata.tsx";
import {
	TrackedConversationEventMetadataFromJSON,
	TrackedConversationEventMetadataToJSON,
} from "./TrackedConversationEventMetadata.tsx";

/**
 * This is a pre-created(seed) TrackedConversationEvent
 * @export
 * @interface SeededTrackedConversationEvent
 */
export interface SeededTrackedConversationEvent {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof SeededTrackedConversationEvent
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {TrackedConversationEventIdentifierDescriptionPairs}
	 * @memberof SeededTrackedConversationEvent
	 */
	identifierDescriptionPair: TrackedConversationEventIdentifierDescriptionPairs;
	/**
	 *
	 * @type {ReferencedConversation}
	 * @memberof SeededTrackedConversationEvent
	 */
	conversation: ReferencedConversation;
	/**
	 *
	 * @type {TrackedConversationEventMetadata}
	 * @memberof SeededTrackedConversationEvent
	 */
	metadata?: TrackedConversationEventMetadata;
}

/**
 * Check if a given object implements the SeededTrackedConversationEvent interface.
 */
export function instanceOfSeededTrackedConversationEvent(
	value: object,
): boolean {
	let isInstance = true;
	isInstance = isInstance && "identifierDescriptionPair" in value;
	isInstance = isInstance && "conversation" in value;

	return isInstance;
}

export function SeededTrackedConversationEventFromJSON(
	json: any,
): SeededTrackedConversationEvent {
	return SeededTrackedConversationEventFromJSONTyped(json, false);
}

export function SeededTrackedConversationEventFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): SeededTrackedConversationEvent {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		identifierDescriptionPair:
			TrackedConversationEventIdentifierDescriptionPairsFromJSON(
				json["identifier_description_pair"],
			),
		conversation: ReferencedConversationFromJSON(json["conversation"]),
		metadata: exists(json, "metadata")
			? TrackedConversationEventMetadataFromJSON(json["metadata"])
			: undefined,
	};
}

export function SeededTrackedConversationEventToJSON(
	value?: SeededTrackedConversationEvent | null,
): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		identifier_description_pair:
			TrackedConversationEventIdentifierDescriptionPairsToJSON(
				value.identifierDescriptionPair,
			),
		conversation: ReferencedConversationToJSON(value.conversation),
		metadata: TrackedConversationEventMetadataToJSON(value.metadata),
	};
}
