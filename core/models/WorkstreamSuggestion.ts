/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import type { EmbeddedModelSchema } from "./EmbeddedModelSchema.tsx";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
} from "./EmbeddedModelSchema.tsx";
import type { FlattenedAnchors } from "./FlattenedAnchors.tsx";
import {
	FlattenedAnchorsFromJSON,
	FlattenedAnchorsToJSON,
} from "./FlattenedAnchors.tsx";
import type { FlattenedAssets } from "./FlattenedAssets.tsx";
import {
	FlattenedAssetsFromJSON,
	FlattenedAssetsToJSON,
} from "./FlattenedAssets.tsx";
import type { FlattenedConversations } from "./FlattenedConversations.tsx";
import {
	FlattenedConversationsFromJSON,
	FlattenedConversationsToJSON,
} from "./FlattenedConversations.tsx";
import type { FlattenedPersons } from "./FlattenedPersons.tsx";
import {
	FlattenedPersonsFromJSON,
	FlattenedPersonsToJSON,
} from "./FlattenedPersons.tsx";
import type { FlattenedTags } from "./FlattenedTags.tsx";
import {
	FlattenedTagsFromJSON,
	FlattenedTagsToJSON,
} from "./FlattenedTags.tsx";
import type { FlattenedWebsites } from "./FlattenedWebsites.tsx";
import {
	FlattenedWebsitesFromJSON,
	FlattenedWebsitesToJSON,
} from "./FlattenedWebsites.tsx";
import type { FlattenedWorkstreamSummaries } from "./FlattenedWorkstreamSummaries.tsx";
import {
	FlattenedWorkstreamSummariesFromJSON,
	FlattenedWorkstreamSummariesToJSON,
} from "./FlattenedWorkstreamSummaries.tsx";
import type { ReferencedAnchor } from "./ReferencedAnchor.tsx";
import {
	ReferencedAnchorFromJSON,
	ReferencedAnchorToJSON,
} from "./ReferencedAnchor.tsx";
import type { ReferencedAsset } from "./ReferencedAsset.tsx";
import {
	ReferencedAssetFromJSON,
	ReferencedAssetToJSON,
} from "./ReferencedAsset.tsx";
import type { ReferencedConversation } from "./ReferencedConversation.tsx";
import {
	ReferencedConversationFromJSON,
	ReferencedConversationToJSON,
} from "./ReferencedConversation.tsx";
import type { ReferencedPerson } from "./ReferencedPerson.tsx";
import {
	ReferencedPersonFromJSON,
	ReferencedPersonToJSON,
} from "./ReferencedPerson.tsx";
import type { ReferencedTag } from "./ReferencedTag.tsx";
import {
	ReferencedTagFromJSON,
	ReferencedTagToJSON,
} from "./ReferencedTag.tsx";
import type { ReferencedWebsite } from "./ReferencedWebsite.tsx";
import {
	ReferencedWebsiteFromJSON,
	ReferencedWebsiteToJSON,
} from "./ReferencedWebsite.tsx";
import type { ReferencedWorkstreamSummary } from "./ReferencedWorkstreamSummary.tsx";
import {
	ReferencedWorkstreamSummaryFromJSON,
	ReferencedWorkstreamSummaryToJSON,
} from "./ReferencedWorkstreamSummary.tsx";
import type { Seed } from "./Seed.tsx";
import { SeedFromJSON, SeedToJSON } from "./Seed.tsx";
import type { Seeds } from "./Seeds.tsx";
import { SeedsFromJSON, SeedsToJSON } from "./Seeds.tsx";
import type { WorkstreamSuggestions } from "./WorkstreamSuggestions.tsx";
import {
	WorkstreamSuggestionsFromJSON,
	WorkstreamSuggestionsToJSON,
} from "./WorkstreamSuggestions.tsx";

/**
 * This is an individual material that is apart of the workstream feed.
 * might want to also consider plural uuids ie top websites/tags/and others..
 *
 * related: this is an optional field that will only be calculated for first degree relationships.
 *          ie. an anchor may have related.iterable.first.persons that are not associated but related.
 *          via the workstream patturn engine.
 *
 * current: if current is defined then this is the current viewed object
 * @export
 * @interface WorkstreamSuggestion
 */
export interface WorkstreamSuggestion {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof WorkstreamSuggestion
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {ReferencedWorkstreamSummary}
	 * @memberof WorkstreamSuggestion
	 */
	summary?: ReferencedWorkstreamSummary;
	/**
	 *
	 * @type {ReferencedAsset}
	 * @memberof WorkstreamSuggestion
	 */
	asset?: ReferencedAsset;
	/**
	 *
	 * @type {ReferencedTag}
	 * @memberof WorkstreamSuggestion
	 */
	tag?: ReferencedTag;
	/**
	 *
	 * @type {ReferencedWebsite}
	 * @memberof WorkstreamSuggestion
	 */
	website?: ReferencedWebsite;
	/**
	 *
	 * @type {ReferencedAnchor}
	 * @memberof WorkstreamSuggestion
	 */
	anchor?: ReferencedAnchor;
	/**
	 *
	 * @type {ReferencedConversation}
	 * @memberof WorkstreamSuggestion
	 */
	conversation?: ReferencedConversation;
	/**
	 *
	 * @type {ReferencedPerson}
	 * @memberof WorkstreamSuggestion
	 */
	person?: ReferencedPerson;
	/**
	 *
	 * @type {Seed}
	 * @memberof WorkstreamSuggestion
	 */
	seed?: Seed;
	/**
	 *
	 * @type {Seeds}
	 * @memberof WorkstreamSuggestion
	 */
	seeds?: Seeds;
	/**
	 *
	 * @type {FlattenedWorkstreamSummaries}
	 * @memberof WorkstreamSuggestion
	 */
	summaries?: FlattenedWorkstreamSummaries;
	/**
	 *
	 * @type {FlattenedAssets}
	 * @memberof WorkstreamSuggestion
	 */
	assets?: FlattenedAssets;
	/**
	 *
	 * @type {FlattenedTags}
	 * @memberof WorkstreamSuggestion
	 */
	tags?: FlattenedTags;
	/**
	 *
	 * @type {FlattenedWebsites}
	 * @memberof WorkstreamSuggestion
	 */
	websites?: FlattenedWebsites;
	/**
	 *
	 * @type {FlattenedAnchors}
	 * @memberof WorkstreamSuggestion
	 */
	anchors?: FlattenedAnchors;
	/**
	 *
	 * @type {FlattenedConversations}
	 * @memberof WorkstreamSuggestion
	 */
	conversations?: FlattenedConversations;
	/**
	 *
	 * @type {FlattenedPersons}
	 * @memberof WorkstreamSuggestion
	 */
	persons?: FlattenedPersons;
	/**
	 *
	 * @type {WorkstreamSuggestions}
	 * @memberof WorkstreamSuggestion
	 */
	related?: WorkstreamSuggestions;
	/**
	 *
	 * @type {WorkstreamSuggestion}
	 * @memberof WorkstreamSuggestion
	 */
	current?: WorkstreamSuggestion;
}

/**
 * Check if a given object implements the WorkstreamSuggestion interface.
 */
export function instanceOfWorkstreamSuggestion(_value: object): boolean {
	const isInstance = true;

	return isInstance;
}

export function WorkstreamSuggestionFromJSON(json: any): WorkstreamSuggestion {
	return WorkstreamSuggestionFromJSONTyped(json, false);
}

export function WorkstreamSuggestionFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): WorkstreamSuggestion {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		summary: exists(json, "summary")
			? ReferencedWorkstreamSummaryFromJSON(json["summary"])
			: undefined,
		asset: exists(json, "asset")
			? ReferencedAssetFromJSON(json["asset"])
			: undefined,
		tag: exists(json, "tag")
			? ReferencedTagFromJSON(json["tag"])
			: undefined,
		website: exists(json, "website")
			? ReferencedWebsiteFromJSON(json["website"])
			: undefined,
		anchor: exists(json, "anchor")
			? ReferencedAnchorFromJSON(json["anchor"])
			: undefined,
		conversation: exists(json, "conversation")
			? ReferencedConversationFromJSON(json["conversation"])
			: undefined,
		person: exists(json, "person")
			? ReferencedPersonFromJSON(json["person"])
			: undefined,
		seed: exists(json, "seed") ? SeedFromJSON(json["seed"]) : undefined,
		seeds: exists(json, "seeds") ? SeedsFromJSON(json["seeds"]) : undefined,
		summaries: exists(json, "summaries")
			? FlattenedWorkstreamSummariesFromJSON(json["summaries"])
			: undefined,
		assets: exists(json, "assets")
			? FlattenedAssetsFromJSON(json["assets"])
			: undefined,
		tags: exists(json, "tags")
			? FlattenedTagsFromJSON(json["tags"])
			: undefined,
		websites: exists(json, "websites")
			? FlattenedWebsitesFromJSON(json["websites"])
			: undefined,
		anchors: exists(json, "anchors")
			? FlattenedAnchorsFromJSON(json["anchors"])
			: undefined,
		conversations: exists(json, "conversations")
			? FlattenedConversationsFromJSON(json["conversations"])
			: undefined,
		persons: exists(json, "persons")
			? FlattenedPersonsFromJSON(json["persons"])
			: undefined,
		related: exists(json, "related")
			? WorkstreamSuggestionsFromJSON(json["related"])
			: undefined,
		current: exists(json, "current")
			? WorkstreamSuggestionFromJSON(json["current"])
			: undefined,
	};
}

export function WorkstreamSuggestionToJSON(
	value?: WorkstreamSuggestion | null,
): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		summary: ReferencedWorkstreamSummaryToJSON(value.summary),
		asset: ReferencedAssetToJSON(value.asset),
		tag: ReferencedTagToJSON(value.tag),
		website: ReferencedWebsiteToJSON(value.website),
		anchor: ReferencedAnchorToJSON(value.anchor),
		conversation: ReferencedConversationToJSON(value.conversation),
		person: ReferencedPersonToJSON(value.person),
		seed: SeedToJSON(value.seed),
		seeds: SeedsToJSON(value.seeds),
		summaries: FlattenedWorkstreamSummariesToJSON(value.summaries),
		assets: FlattenedAssetsToJSON(value.assets),
		tags: FlattenedTagsToJSON(value.tags),
		websites: FlattenedWebsitesToJSON(value.websites),
		anchors: FlattenedAnchorsToJSON(value.anchors),
		conversations: FlattenedConversationsToJSON(value.conversations),
		persons: FlattenedPersonsToJSON(value.persons),
		related: WorkstreamSuggestionsToJSON(value.related),
		current: WorkstreamSuggestionToJSON(value.current),
	};
}
