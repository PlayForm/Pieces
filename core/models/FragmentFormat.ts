/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import type { EmbeddedModelSchema } from "./EmbeddedModelSchema.tsx";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
} from "./EmbeddedModelSchema.tsx";
import type { FragmentMetadata } from "./FragmentMetadata.tsx";
import {
	FragmentMetadataFromJSON,
	FragmentMetadataToJSON,
} from "./FragmentMetadata.tsx";
import type { TransferableBytes } from "./TransferableBytes.tsx";
import {
	TransferableBytesFromJSON,
	TransferableBytesToJSON,
} from "./TransferableBytes.tsx";
import type { TransferableString } from "./TransferableString.tsx";
import {
	TransferableStringFromJSON,
	TransferableStringToJSON,
} from "./TransferableString.tsx";

/**
 * This will be either a TransferableString or TransferableBytes that represent your fragment. ONLY Pass one or the other DONT pass both or neither.
 * @export
 * @interface FragmentFormat
 */
export interface FragmentFormat {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof FragmentFormat
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {TransferableString}
	 * @memberof FragmentFormat
	 */
	string?: TransferableString;
	/**
	 *
	 * @type {TransferableBytes}
	 * @memberof FragmentFormat
	 */
	bytes?: TransferableBytes;
	/**
	 *
	 * @type {FragmentMetadata}
	 * @memberof FragmentFormat
	 */
	metadata?: FragmentMetadata;
}

/**
 * Check if a given object implements the FragmentFormat interface.
 */
export function instanceOfFragmentFormat(_value: object): boolean {
	const isInstance = true;

	return isInstance;
}

export function FragmentFormatFromJSON(json: any): FragmentFormat {
	return FragmentFormatFromJSONTyped(json, false);
}

export function FragmentFormatFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): FragmentFormat {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		string: exists(json, "string")
			? TransferableStringFromJSON(json["string"])
			: undefined,
		bytes: exists(json, "bytes")
			? TransferableBytesFromJSON(json["bytes"])
			: undefined,
		metadata: exists(json, "metadata")
			? FragmentMetadataFromJSON(json["metadata"])
			: undefined,
	};
}

export function FragmentFormatToJSON(value?: FragmentFormat | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		string: TransferableStringToJSON(value.string),
		bytes: TransferableBytesToJSON(value.bytes),
		metadata: FragmentMetadataToJSON(value.metadata),
	};
}
