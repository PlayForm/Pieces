/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import type { Conversation } from "./Conversation.tsx";
import { ConversationFromJSON, ConversationToJSON } from "./Conversation.tsx";
import type { EmbeddedModelSchema } from "./EmbeddedModelSchema.tsx";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
} from "./EmbeddedModelSchema.tsx";
import type { SearchedAnnotations } from "./SearchedAnnotations.tsx";
import {
	SearchedAnnotationsFromJSON,
	SearchedAnnotationsToJSON,
} from "./SearchedAnnotations.tsx";
import type { SearchedConversationMessages } from "./SearchedConversationMessages.tsx";
import {
	SearchedConversationMessagesFromJSON,
	SearchedConversationMessagesToJSON,
} from "./SearchedConversationMessages.tsx";

/**
 * This is used for the Conversations searching endpoint.
 *
 * conversation here is only provided if transferables are set to true.
 *
 * temporal: if this is provided this means that their material matched the input via a timestamp.
 *
 * TODO will want to consider returning related materials to this material potentially both associated/ and not associated materials
 * ie suggestion: WorkstreamSuggestions
 * @export
 * @interface SearchedConversation
 */
export interface SearchedConversation {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof SearchedConversation
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {Conversation}
	 * @memberof SearchedConversation
	 */
	conversation?: Conversation;
	/**
	 *
	 * @type {SearchedConversationMessages}
	 * @memberof SearchedConversation
	 */
	messages?: SearchedConversationMessages;
	/**
	 *
	 * @type {SearchedAnnotations}
	 * @memberof SearchedConversation
	 */
	annotations?: SearchedAnnotations;
	/**
	 *
	 * @type {boolean}
	 * @memberof SearchedConversation
	 */
	exact: boolean;
	/**
	 *
	 * @type {number}
	 * @memberof SearchedConversation
	 */
	similarity: number;
	/**
	 *
	 * @type {boolean}
	 * @memberof SearchedConversation
	 */
	temporal?: boolean;
	/**
	 * This is the uuid of the conversation.
	 * @type {string}
	 * @memberof SearchedConversation
	 */
	identifier: string;
}

/**
 * Check if a given object implements the SearchedConversation interface.
 */
export function instanceOfSearchedConversation(value: object): boolean {
	let isInstance = true;
	isInstance = isInstance && "exact" in value;
	isInstance = isInstance && "similarity" in value;
	isInstance = isInstance && "identifier" in value;

	return isInstance;
}

export function SearchedConversationFromJSON(json: any): SearchedConversation {
	return SearchedConversationFromJSONTyped(json, false);
}

export function SearchedConversationFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): SearchedConversation {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		conversation: exists(json, "conversation")
			? ConversationFromJSON(json["conversation"])
			: undefined,
		messages: exists(json, "messages")
			? SearchedConversationMessagesFromJSON(json["messages"])
			: undefined,
		annotations: exists(json, "annotations")
			? SearchedAnnotationsFromJSON(json["annotations"])
			: undefined,
		exact: json["exact"],
		similarity: json["similarity"],
		temporal: exists(json, "temporal") ? json["temporal"] : undefined,
		identifier: json["identifier"],
	};
}

export function SearchedConversationToJSON(
	value?: SearchedConversation | null,
): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		conversation: ConversationToJSON(value.conversation),
		messages: SearchedConversationMessagesToJSON(value.messages),
		annotations: SearchedAnnotationsToJSON(value.annotations),
		exact: value.exact,
		similarity: value.similarity,
		temporal: value.temporal,
		identifier: value.identifier,
	};
}
