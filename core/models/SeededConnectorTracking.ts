/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import type { EmbeddedModelSchema } from "./EmbeddedModelSchema.tsx";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
} from "./EmbeddedModelSchema.tsx";
import type { SeededTrackedAdoptionEvent } from "./SeededTrackedAdoptionEvent.tsx";
import {
	SeededTrackedAdoptionEventFromJSON,
	SeededTrackedAdoptionEventToJSON,
} from "./SeededTrackedAdoptionEvent.tsx";
import type { SeededTrackedAssetEvent } from "./SeededTrackedAssetEvent.tsx";
import {
	SeededTrackedAssetEventFromJSON,
	SeededTrackedAssetEventToJSON,
} from "./SeededTrackedAssetEvent.tsx";
import type { SeededTrackedAssetsEvent } from "./SeededTrackedAssetsEvent.tsx";
import {
	SeededTrackedAssetsEventFromJSON,
	SeededTrackedAssetsEventToJSON,
} from "./SeededTrackedAssetsEvent.tsx";
import type { SeededTrackedConversationEvent } from "./SeededTrackedConversationEvent.tsx";
import {
	SeededTrackedConversationEventFromJSON,
	SeededTrackedConversationEventToJSON,
} from "./SeededTrackedConversationEvent.tsx";
import type { SeededTrackedFormatEvent } from "./SeededTrackedFormatEvent.tsx";
import {
	SeededTrackedFormatEventFromJSON,
	SeededTrackedFormatEventToJSON,
} from "./SeededTrackedFormatEvent.tsx";
import type { SeededTrackedInteractionEvent } from "./SeededTrackedInteractionEvent.tsx";
import {
	SeededTrackedInteractionEventFromJSON,
	SeededTrackedInteractionEventToJSON,
} from "./SeededTrackedInteractionEvent.tsx";
import type { SeededTrackedKeyboardEvent } from "./SeededTrackedKeyboardEvent.tsx";
import {
	SeededTrackedKeyboardEventFromJSON,
	SeededTrackedKeyboardEventToJSON,
} from "./SeededTrackedKeyboardEvent.tsx";
import type { SeededTrackedMachineLearningEvent } from "./SeededTrackedMachineLearningEvent.tsx";
import {
	SeededTrackedMachineLearningEventFromJSON,
	SeededTrackedMachineLearningEventToJSON,
} from "./SeededTrackedMachineLearningEvent.tsx";
import type { SeededTrackedSessionEvent } from "./SeededTrackedSessionEvent.tsx";
import {
	SeededTrackedSessionEventFromJSON,
	SeededTrackedSessionEventToJSON,
} from "./SeededTrackedSessionEvent.tsx";

/**
 * This model is designed to be light weight and low friction while most of the heavy lifting will be happening inside of the context servers.
 *
 * This Model is important because this has references to our materials, instead of fully referenced materials.(very similar to our SeededTrackedEvent, consider consolidating and converting these to Referenced models instead of ID's)
 * @export
 * @interface SeededConnectorTracking
 */
export interface SeededConnectorTracking {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof SeededConnectorTracking
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {SeededTrackedFormatEvent}
	 * @memberof SeededConnectorTracking
	 */
	format?: SeededTrackedFormatEvent;
	/**
	 *
	 * @type {SeededTrackedAssetEvent}
	 * @memberof SeededConnectorTracking
	 */
	asset?: SeededTrackedAssetEvent;
	/**
	 *
	 * @type {SeededTrackedInteractionEvent}
	 * @memberof SeededConnectorTracking
	 */
	interaction?: SeededTrackedInteractionEvent;
	/**
	 *
	 * @type {SeededTrackedKeyboardEvent}
	 * @memberof SeededConnectorTracking
	 */
	keyboard?: SeededTrackedKeyboardEvent;
	/**
	 *
	 * @type {SeededTrackedSessionEvent}
	 * @memberof SeededConnectorTracking
	 */
	session?: SeededTrackedSessionEvent;
	/**
	 *
	 * @type {SeededTrackedAssetsEvent}
	 * @memberof SeededConnectorTracking
	 */
	assets?: SeededTrackedAssetsEvent;
	/**
	 *
	 * @type {SeededTrackedMachineLearningEvent}
	 * @memberof SeededConnectorTracking
	 */
	ml?: SeededTrackedMachineLearningEvent;
	/**
	 *
	 * @type {SeededTrackedAdoptionEvent}
	 * @memberof SeededConnectorTracking
	 */
	adoption?: SeededTrackedAdoptionEvent;
	/**
	 *
	 * @type {SeededTrackedConversationEvent}
	 * @memberof SeededConnectorTracking
	 */
	conversation?: SeededTrackedConversationEvent;
}

/**
 * Check if a given object implements the SeededConnectorTracking interface.
 */
export function instanceOfSeededConnectorTracking(_value: object): boolean {
	const isInstance = true;

	return isInstance;
}

export function SeededConnectorTrackingFromJSON(
	json: any,
): SeededConnectorTracking {
	return SeededConnectorTrackingFromJSONTyped(json, false);
}

export function SeededConnectorTrackingFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): SeededConnectorTracking {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		format: exists(json, "format")
			? SeededTrackedFormatEventFromJSON(json["format"])
			: undefined,
		asset: exists(json, "asset")
			? SeededTrackedAssetEventFromJSON(json["asset"])
			: undefined,
		interaction: exists(json, "interaction")
			? SeededTrackedInteractionEventFromJSON(json["interaction"])
			: undefined,
		keyboard: exists(json, "keyboard")
			? SeededTrackedKeyboardEventFromJSON(json["keyboard"])
			: undefined,
		session: exists(json, "session")
			? SeededTrackedSessionEventFromJSON(json["session"])
			: undefined,
		assets: exists(json, "assets")
			? SeededTrackedAssetsEventFromJSON(json["assets"])
			: undefined,
		ml: exists(json, "ml")
			? SeededTrackedMachineLearningEventFromJSON(json["ml"])
			: undefined,
		adoption: exists(json, "adoption")
			? SeededTrackedAdoptionEventFromJSON(json["adoption"])
			: undefined,
		conversation: exists(json, "conversation")
			? SeededTrackedConversationEventFromJSON(json["conversation"])
			: undefined,
	};
}

export function SeededConnectorTrackingToJSON(
	value?: SeededConnectorTracking | null,
): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		format: SeededTrackedFormatEventToJSON(value.format),
		asset: SeededTrackedAssetEventToJSON(value.asset),
		interaction: SeededTrackedInteractionEventToJSON(value.interaction),
		keyboard: SeededTrackedKeyboardEventToJSON(value.keyboard),
		session: SeededTrackedSessionEventToJSON(value.session),
		assets: SeededTrackedAssetsEventToJSON(value.assets),
		ml: SeededTrackedMachineLearningEventToJSON(value.ml),
		adoption: SeededTrackedAdoptionEventToJSON(value.adoption),
		conversation: SeededTrackedConversationEventToJSON(value.conversation),
	};
}
