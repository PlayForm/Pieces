/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
	type EmbeddedModelSchema,
} from "./EmbeddedModelSchema.tsx";
import {
	GroupedTimestampFromJSON,
	GroupedTimestampToJSON,
	type GroupedTimestamp,
} from "./GroupedTimestamp.tsx";
import {
	QGPTConversationMessageRoleEnumFromJSON,
	QGPTConversationMessageRoleEnumToJSON,
	type QGPTConversationMessageRoleEnum,
} from "./QGPTConversationMessageRoleEnum.tsx";

/**
 * This will take a single message, and a role.
 * @export
 * @interface QGPTConversationMessage
 */
export interface QGPTConversationMessage {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof QGPTConversationMessage
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {string}
	 * @memberof QGPTConversationMessage
	 */
	text: string;
	/**
	 *
	 * @type {QGPTConversationMessageRoleEnum}
	 * @memberof QGPTConversationMessage
	 */
	role: QGPTConversationMessageRoleEnum;
	/**
	 *
	 * @type {GroupedTimestamp}
	 * @memberof QGPTConversationMessage
	 */
	timestamp: GroupedTimestamp;
}

/**
 * Check if a given object implements the QGPTConversationMessage interface.
 */
export function instanceOfQGPTConversationMessage(value: object): boolean {
	let isInstance = true;
	isInstance = isInstance && "text" in value;
	isInstance = isInstance && "role" in value;
	isInstance = isInstance && "timestamp" in value;

	return isInstance;
}

export function QGPTConversationMessageFromJSON(
	json: any,
): QGPTConversationMessage {
	return QGPTConversationMessageFromJSONTyped(json, false);
}

export function QGPTConversationMessageFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): QGPTConversationMessage {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		text: json["text"],
		role: QGPTConversationMessageRoleEnumFromJSON(json["role"]),
		timestamp: GroupedTimestampFromJSON(json["timestamp"]),
	};
}

export function QGPTConversationMessageToJSON(
	value?: QGPTConversationMessage | null,
): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		text: value.text,
		role: QGPTConversationMessageRoleEnumToJSON(value.role),
		timestamp: GroupedTimestampToJSON(value.timestamp),
	};
}
