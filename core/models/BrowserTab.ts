/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import {
	AnonymousTemporalRangeFromJSON,
	AnonymousTemporalRangeToJSON,
	type AnonymousTemporalRange,
} from "./AnonymousTemporalRange.tsx";
import {
	BrowserTabValuesFromJSON,
	BrowserTabValuesToJSON,
	type BrowserTabValues,
} from "./BrowserTabValues.tsx";
import {
	DocumentContributorsFromJSON,
	DocumentContributorsToJSON,
	type DocumentContributors,
} from "./DocumentContributors.tsx";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
	type EmbeddedModelSchema,
} from "./EmbeddedModelSchema.tsx";
import {
	SeededAnchorFromJSON,
	SeededAnchorToJSON,
	type SeededAnchor,
} from "./SeededAnchor.tsx";
import {
	SeededWebsiteFromJSON,
	SeededWebsiteToJSON,
	type SeededWebsite,
} from "./SeededWebsite.tsx";

/**
 * a tab can have many values because you might want to pass in a value that represents the code_blocks(snippets) or a md represenet
 * note: please only pass 1 representation, I will clean on POS side tho (txt || md || html)
 *
 * anchor: can be defined in the browser if view a local file
 *
 * website: this is the given url of the tab
 *
 * range: this is the amount of time this user is current on this given tab
 *
 * current: means that this is the current tab that is open
 *
 * contributors: these are all the extracted people from this given tab
 * @export
 * @interface BrowserTab
 */
export interface BrowserTab {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof BrowserTab
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {BrowserTabValues}
	 * @memberof BrowserTab
	 */
	values?: BrowserTabValues;
	/**
	 *
	 * @type {SeededAnchor}
	 * @memberof BrowserTab
	 */
	anchor?: SeededAnchor;
	/**
	 *
	 * @type {SeededWebsite}
	 * @memberof BrowserTab
	 */
	website?: SeededWebsite;
	/**
	 *
	 * @type {AnonymousTemporalRange}
	 * @memberof BrowserTab
	 */
	range?: AnonymousTemporalRange;
	/**
	 *
	 * @type {boolean}
	 * @memberof BrowserTab
	 */
	current?: boolean;
	/**
	 *
	 * @type {DocumentContributors}
	 * @memberof BrowserTab
	 */
	contributors?: DocumentContributors;
}

/**
 * Check if a given object implements the BrowserTab interface.
 */
export function instanceOfBrowserTab(_value: object): boolean {
	const isInstance = true;

	return isInstance;
}

export function BrowserTabFromJSON(json: any): BrowserTab {
	return BrowserTabFromJSONTyped(json, false);
}

export function BrowserTabFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): BrowserTab {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		values: exists(json, "values")
			? BrowserTabValuesFromJSON(json["values"])
			: undefined,
		anchor: exists(json, "anchor")
			? SeededAnchorFromJSON(json["anchor"])
			: undefined,
		website: exists(json, "website")
			? SeededWebsiteFromJSON(json["website"])
			: undefined,
		range: exists(json, "range")
			? AnonymousTemporalRangeFromJSON(json["range"])
			: undefined,
		current: exists(json, "current") ? json["current"] : undefined,
		contributors: exists(json, "contributors")
			? DocumentContributorsFromJSON(json["contributors"])
			: undefined,
	};
}

export function BrowserTabToJSON(value?: BrowserTab | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		values: BrowserTabValuesToJSON(value.values),
		anchor: SeededAnchorToJSON(value.anchor),
		website: SeededWebsiteToJSON(value.website),
		range: AnonymousTemporalRangeToJSON(value.range),
		current: value.current,
		contributors: DocumentContributorsToJSON(value.contributors),
	};
}
