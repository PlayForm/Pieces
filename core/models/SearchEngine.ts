/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import type { EmbeddedModelSchema } from "./EmbeddedModelSchema.tsx";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
} from "./EmbeddedModelSchema.tsx";
import type { EmbeddingsSearchOptions } from "./EmbeddingsSearchOptions.tsx";
import {
	EmbeddingsSearchOptionsFromJSON,
	EmbeddingsSearchOptionsToJSON,
} from "./EmbeddingsSearchOptions.tsx";
import type { FullTextSearchOptions } from "./FullTextSearchOptions.tsx";
import {
	FullTextSearchOptionsFromJSON,
	FullTextSearchOptionsToJSON,
} from "./FullTextSearchOptions.tsx";
import type { SearchEngines } from "./SearchEngines.tsx";
import {
	SearchEnginesFromJSON,
	SearchEnginesToJSON,
} from "./SearchEngines.tsx";
import type { TemporalSearchOptions } from "./TemporalSearchOptions.tsx";
import {
	TemporalSearchOptionsFromJSON,
	TemporalSearchOptionsToJSON,
} from "./TemporalSearchOptions.tsx";
import type { WorkstreamSearchOptions } from "./WorkstreamSearchOptions.tsx";
import {
	WorkstreamSearchOptionsFromJSON,
	WorkstreamSearchOptionsToJSON,
} from "./WorkstreamSearchOptions.tsx";

/**
 * This will determine the type of search that will run
 *
 * These are all different searching methods all of which are exclusive.
 * Meaning that you cannot mix & match types.
 *
 * operations: is here if you want to build complex searching behavior.
 * (A || B) && (B || C) , note this can get very complex but can be as flexible as you need.
 * @export
 * @interface SearchEngine
 */
export interface SearchEngine {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof SearchEngine
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {string}
	 * @memberof SearchEngine
	 */
	query?: string;
	/**
	 *
	 * @type {EmbeddingsSearchOptions}
	 * @memberof SearchEngine
	 */
	embeddings?: EmbeddingsSearchOptions;
	/**
	 *
	 * @type {FullTextSearchOptions}
	 * @memberof SearchEngine
	 */
	fullText?: FullTextSearchOptions;
	/**
	 *
	 * @type {TemporalSearchOptions}
	 * @memberof SearchEngine
	 */
	temporal?: TemporalSearchOptions;
	/**
	 *
	 * @type {WorkstreamSearchOptions}
	 * @memberof SearchEngine
	 */
	workstream?: WorkstreamSearchOptions;
	/**
	 *
	 * @type {SearchEngines}
	 * @memberof SearchEngine
	 */
	operations?: SearchEngines;
}

/**
 * Check if a given object implements the SearchEngine interface.
 */
export function instanceOfSearchEngine(_value: object): boolean {
	const isInstance = true;

	return isInstance;
}

export function SearchEngineFromJSON(json: any): SearchEngine {
	return SearchEngineFromJSONTyped(json, false);
}

export function SearchEngineFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): SearchEngine {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		query: exists(json, "query") ? json["query"] : undefined,
		embeddings: exists(json, "embeddings")
			? EmbeddingsSearchOptionsFromJSON(json["embeddings"])
			: undefined,
		fullText: exists(json, "full_text")
			? FullTextSearchOptionsFromJSON(json["full_text"])
			: undefined,
		temporal: exists(json, "temporal")
			? TemporalSearchOptionsFromJSON(json["temporal"])
			: undefined,
		workstream: exists(json, "workstream")
			? WorkstreamSearchOptionsFromJSON(json["workstream"])
			: undefined,
		operations: exists(json, "operations")
			? SearchEnginesFromJSON(json["operations"])
			: undefined,
	};
}

export function SearchEngineToJSON(value?: SearchEngine | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		query: value.query,
		embeddings: EmbeddingsSearchOptionsToJSON(value.embeddings),
		full_text: FullTextSearchOptionsToJSON(value.fullText),
		temporal: TemporalSearchOptionsToJSON(value.temporal),
		workstream: WorkstreamSearchOptionsToJSON(value.workstream),
		operations: SearchEnginesToJSON(value.operations),
	};
}
