/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
	type EmbeddedModelSchema,
} from "./EmbeddedModelSchema.tsx";
import {
	MechanismEnumFromJSON,
	MechanismEnumToJSON,
	type MechanismEnum,
} from "./MechanismEnum.tsx";
import {
	SeededAnchorFromJSON,
	SeededAnchorToJSON,
	type SeededAnchor,
} from "./SeededAnchor.tsx";
import {
	SeededAnnotationFromJSON,
	SeededAnnotationToJSON,
	type SeededAnnotation,
} from "./SeededAnnotation.tsx";
import {
	SeededAssetSensitiveFromJSON,
	SeededAssetSensitiveToJSON,
	type SeededAssetSensitive,
} from "./SeededAssetSensitive.tsx";
import {
	SeededAssetTagFromJSON,
	SeededAssetTagToJSON,
	type SeededAssetTag,
} from "./SeededAssetTag.tsx";
import {
	SeededAssetWebsiteFromJSON,
	SeededAssetWebsiteToJSON,
	type SeededAssetWebsite,
} from "./SeededAssetWebsite.tsx";
import {
	SeededHintFromJSON,
	SeededHintToJSON,
	type SeededHint,
} from "./SeededHint.tsx";
import {
	SeededPersonFromJSON,
	SeededPersonToJSON,
	type SeededPerson,
} from "./SeededPerson.tsx";

/**
 * This is optional metadata sent with the SeededAsset and other SeededAssets ie (UE, Jetbrains...)
 *
 * Note: if a user/develop didnt explicitly state a mechanism we will default to manual(user Driven only)
 * @export
 * @interface SeededAssetMetadata
 */
export interface SeededAssetMetadata {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof SeededAssetMetadata
	 */
	schema?: EmbeddedModelSchema;
	/**
	 * This is the name of the asset.
	 * @type {string}
	 * @memberof SeededAssetMetadata
	 */
	name?: string;
	/**
	 *
	 * @type {MechanismEnum}
	 * @memberof SeededAssetMetadata
	 */
	mechanism?: MechanismEnum;
	/**
	 * (optional) can add some tags to associate to this asset.
	 * @type {Array<SeededAssetTag>}
	 * @memberof SeededAssetMetadata
	 */
	tags?: SeededAssetTag[];
	/**
	 *
	 * @type {Array<SeededAssetWebsite>}
	 * @memberof SeededAssetMetadata
	 */
	websites?: SeededAssetWebsite[];
	/**
	 *
	 * @type {Array<SeededAssetSensitive>}
	 * @memberof SeededAssetMetadata
	 */
	sensitives?: SeededAssetSensitive[];
	/**
	 *
	 * @type {Array<SeededPerson>}
	 * @memberof SeededAssetMetadata
	 */
	persons?: SeededPerson[];
	/**
	 *
	 * @type {Array<SeededAnnotation>}
	 * @memberof SeededAssetMetadata
	 */
	annotations?: SeededAnnotation[];
	/**
	 *
	 * @type {Array<SeededHint>}
	 * @memberof SeededAssetMetadata
	 */
	hints?: SeededHint[];
	/**
	 *
	 * @type {Array<SeededAnchor>}
	 * @memberof SeededAssetMetadata
	 */
	anchors?: SeededAnchor[];
}

/**
 * Check if a given object implements the SeededAssetMetadata interface.
 */
export function instanceOfSeededAssetMetadata(_value: object): boolean {
	const isInstance = true;

	return isInstance;
}

export function SeededAssetMetadataFromJSON(json: any): SeededAssetMetadata {
	return SeededAssetMetadataFromJSONTyped(json, false);
}

export function SeededAssetMetadataFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): SeededAssetMetadata {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		name: exists(json, "name") ? json["name"] : undefined,
		mechanism: exists(json, "mechanism")
			? MechanismEnumFromJSON(json["mechanism"])
			: undefined,
		tags: exists(json, "tags")
			? (json["tags"] as any[]).map(SeededAssetTagFromJSON)
			: undefined,
		websites: exists(json, "websites")
			? (json["websites"] as any[]).map(SeededAssetWebsiteFromJSON)
			: undefined,
		sensitives: exists(json, "sensitives")
			? (json["sensitives"] as any[]).map(SeededAssetSensitiveFromJSON)
			: undefined,
		persons: exists(json, "persons")
			? (json["persons"] as any[]).map(SeededPersonFromJSON)
			: undefined,
		annotations: exists(json, "annotations")
			? (json["annotations"] as any[]).map(SeededAnnotationFromJSON)
			: undefined,
		hints: exists(json, "hints")
			? (json["hints"] as any[]).map(SeededHintFromJSON)
			: undefined,
		anchors: exists(json, "anchors")
			? (json["anchors"] as any[]).map(SeededAnchorFromJSON)
			: undefined,
	};
}

export function SeededAssetMetadataToJSON(
	value?: SeededAssetMetadata | null,
): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		name: value.name,
		mechanism: MechanismEnumToJSON(value.mechanism),
		tags:
			value.tags === undefined
				? undefined
				: (value.tags as any[]).map(SeededAssetTagToJSON),
		websites:
			value.websites === undefined
				? undefined
				: (value.websites as any[]).map(SeededAssetWebsiteToJSON),
		sensitives:
			value.sensitives === undefined
				? undefined
				: (value.sensitives as any[]).map(SeededAssetSensitiveToJSON),
		persons:
			value.persons === undefined
				? undefined
				: (value.persons as any[]).map(SeededPersonToJSON),
		annotations:
			value.annotations === undefined
				? undefined
				: (value.annotations as any[]).map(SeededAnnotationToJSON),
		hints:
			value.hints === undefined
				? undefined
				: (value.hints as any[]).map(SeededHintToJSON),
		anchors:
			value.anchors === undefined
				? undefined
				: (value.anchors as any[]).map(SeededAnchorToJSON),
	};
}
