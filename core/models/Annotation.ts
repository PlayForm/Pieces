/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import type { AnnotationTypeEnum } from "./AnnotationTypeEnum.tsx";
import {
	AnnotationTypeEnumFromJSON,
	AnnotationTypeEnumToJSON,
} from "./AnnotationTypeEnum.tsx";
import type { EmbeddedModelSchema } from "./EmbeddedModelSchema.tsx";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
} from "./EmbeddedModelSchema.tsx";
import type { FlattenedConversationMessages } from "./FlattenedConversationMessages.tsx";
import {
	FlattenedConversationMessagesFromJSON,
	FlattenedConversationMessagesToJSON,
} from "./FlattenedConversationMessages.tsx";
import type { GroupedTimestamp } from "./GroupedTimestamp.tsx";
import {
	GroupedTimestampFromJSON,
	GroupedTimestampToJSON,
} from "./GroupedTimestamp.tsx";
import type { MechanismEnum } from "./MechanismEnum.tsx";
import {
	MechanismEnumFromJSON,
	MechanismEnumToJSON,
} from "./MechanismEnum.tsx";
import type { ReferencedAnchor } from "./ReferencedAnchor.tsx";
import {
	ReferencedAnchorFromJSON,
	ReferencedAnchorToJSON,
} from "./ReferencedAnchor.tsx";
import type { ReferencedAsset } from "./ReferencedAsset.tsx";
import {
	ReferencedAssetFromJSON,
	ReferencedAssetToJSON,
} from "./ReferencedAsset.tsx";
import type { ReferencedConversation } from "./ReferencedConversation.tsx";
import {
	ReferencedConversationFromJSON,
	ReferencedConversationToJSON,
} from "./ReferencedConversation.tsx";
import type { ReferencedModel } from "./ReferencedModel.tsx";
import {
	ReferencedModelFromJSON,
	ReferencedModelToJSON,
} from "./ReferencedModel.tsx";
import type { ReferencedPerson } from "./ReferencedPerson.tsx";
import {
	ReferencedPersonFromJSON,
	ReferencedPersonToJSON,
} from "./ReferencedPerson.tsx";
import type { ReferencedWorkstreamSummary } from "./ReferencedWorkstreamSummary.tsx";
import {
	ReferencedWorkstreamSummaryFromJSON,
	ReferencedWorkstreamSummaryToJSON,
} from "./ReferencedWorkstreamSummary.tsx";
import type { Score } from "./Score.tsx";
import { ScoreFromJSON, ScoreToJSON } from "./Score.tsx";

/**
 * An Annotation is the replacement for descriptions, this will enable comments, description, summaries and many more.
 *
 * person on here is a reference to the description/comment/annotation about a person
 *
 * NOTE: person here is NOT the creator of the annotaion. but rather the descriptions of the person.
 * NOTE****: if we want to add "who" wrote the annotation, we will want to add a new field on here called author && will need to also layer in behavior the enable an author(person) and an asset both being referenced(ensure you check the side effect in the AssetsFacade.delete)
 * @export
 * @interface Annotation
 */
export interface Annotation {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof Annotation
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {string}
	 * @memberof Annotation
	 */
	id: string;
	/**
	 *
	 * @type {GroupedTimestamp}
	 * @memberof Annotation
	 */
	created: GroupedTimestamp;
	/**
	 *
	 * @type {GroupedTimestamp}
	 * @memberof Annotation
	 */
	updated: GroupedTimestamp;
	/**
	 *
	 * @type {GroupedTimestamp}
	 * @memberof Annotation
	 */
	deleted?: GroupedTimestamp;
	/**
	 *
	 * @type {MechanismEnum}
	 * @memberof Annotation
	 */
	mechanism?: MechanismEnum;
	/**
	 *
	 * @type {ReferencedAsset}
	 * @memberof Annotation
	 */
	asset?: ReferencedAsset;
	/**
	 *
	 * @type {ReferencedPerson}
	 * @memberof Annotation
	 */
	person?: ReferencedPerson;
	/**
	 *
	 * @type {AnnotationTypeEnum}
	 * @memberof Annotation
	 */
	type: AnnotationTypeEnum;
	/**
	 * This is the text of the annotation.
	 * @type {string}
	 * @memberof Annotation
	 */
	text: string;
	/**
	 *
	 * @type {ReferencedModel}
	 * @memberof Annotation
	 */
	model?: ReferencedModel;
	/**
	 *
	 * @type {boolean}
	 * @memberof Annotation
	 */
	pseudo?: boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof Annotation
	 */
	favorited?: boolean;
	/**
	 *
	 * @type {ReferencedAnchor}
	 * @memberof Annotation
	 */
	anchor?: ReferencedAnchor;
	/**
	 *
	 * @type {ReferencedConversation}
	 * @memberof Annotation
	 */
	conversation?: ReferencedConversation;
	/**
	 *
	 * @type {Score}
	 * @memberof Annotation
	 */
	score?: Score;
	/**
	 *
	 * @type {FlattenedConversationMessages}
	 * @memberof Annotation
	 */
	messages?: FlattenedConversationMessages;
	/**
	 *
	 * @type {ReferencedWorkstreamSummary}
	 * @memberof Annotation
	 */
	summary?: ReferencedWorkstreamSummary;
}

/**
 * Check if a given object implements the Annotation interface.
 */
export function instanceOfAnnotation(value: object): boolean {
	let isInstance = true;
	isInstance = isInstance && "id" in value;
	isInstance = isInstance && "created" in value;
	isInstance = isInstance && "updated" in value;
	isInstance = isInstance && "type" in value;
	isInstance = isInstance && "text" in value;

	return isInstance;
}

export function AnnotationFromJSON(json: any): Annotation {
	return AnnotationFromJSONTyped(json, false);
}

export function AnnotationFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): Annotation {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		id: json["id"],
		created: GroupedTimestampFromJSON(json["created"]),
		updated: GroupedTimestampFromJSON(json["updated"]),
		deleted: exists(json, "deleted")
			? GroupedTimestampFromJSON(json["deleted"])
			: undefined,
		mechanism: exists(json, "mechanism")
			? MechanismEnumFromJSON(json["mechanism"])
			: undefined,
		asset: exists(json, "asset")
			? ReferencedAssetFromJSON(json["asset"])
			: undefined,
		person: exists(json, "person")
			? ReferencedPersonFromJSON(json["person"])
			: undefined,
		type: AnnotationTypeEnumFromJSON(json["type"]),
		text: json["text"],
		model: exists(json, "model")
			? ReferencedModelFromJSON(json["model"])
			: undefined,
		pseudo: exists(json, "pseudo") ? json["pseudo"] : undefined,
		favorited: exists(json, "favorited") ? json["favorited"] : undefined,
		anchor: exists(json, "anchor")
			? ReferencedAnchorFromJSON(json["anchor"])
			: undefined,
		conversation: exists(json, "conversation")
			? ReferencedConversationFromJSON(json["conversation"])
			: undefined,
		score: exists(json, "score") ? ScoreFromJSON(json["score"]) : undefined,
		messages: exists(json, "messages")
			? FlattenedConversationMessagesFromJSON(json["messages"])
			: undefined,
		summary: exists(json, "summary")
			? ReferencedWorkstreamSummaryFromJSON(json["summary"])
			: undefined,
	};
}

export function AnnotationToJSON(value?: Annotation | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		id: value.id,
		created: GroupedTimestampToJSON(value.created),
		updated: GroupedTimestampToJSON(value.updated),
		deleted: GroupedTimestampToJSON(value.deleted),
		mechanism: MechanismEnumToJSON(value.mechanism),
		asset: ReferencedAssetToJSON(value.asset),
		person: ReferencedPersonToJSON(value.person),
		type: AnnotationTypeEnumToJSON(value.type),
		text: value.text,
		model: ReferencedModelToJSON(value.model),
		pseudo: value.pseudo,
		favorited: value.favorited,
		anchor: ReferencedAnchorToJSON(value.anchor),
		conversation: ReferencedConversationToJSON(value.conversation),
		score: ScoreToJSON(value.score),
		messages: FlattenedConversationMessagesToJSON(value.messages),
		summary: ReferencedWorkstreamSummaryToJSON(value.summary),
	};
}
