/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
	type EmbeddedModelSchema,
} from "./EmbeddedModelSchema.tsx";
import {
	SystemExecutionInformationFromJSON,
	SystemExecutionInformationToJSON,
	type SystemExecutionInformation,
} from "./SystemExecutionInformation.tsx";
import {
	TLPCodeFragmentClassificationMetadataFromJSON,
	TLPCodeFragmentClassificationMetadataToJSON,
	type TLPCodeFragmentClassificationMetadata,
} from "./TLPCodeFragmentClassificationMetadata.tsx";

/**
 * Model for ML big query classification.
 * @export
 * @interface TLPCodeFragmentClassification
 */
export interface TLPCodeFragmentClassification {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof TLPCodeFragmentClassification
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {string}
	 * @memberof TLPCodeFragmentClassification
	 */
	asset: string;
	/**
	 *
	 * @type {string}
	 * @memberof TLPCodeFragmentClassification
	 */
	model: string;
	/**
	 *
	 * @type {string}
	 * @memberof TLPCodeFragmentClassification
	 */
	created: string;
	/**
	 *
	 * @type {string}
	 * @memberof TLPCodeFragmentClassification
	 */
	classification: string;
	/**
	 *
	 * @type {number}
	 * @memberof TLPCodeFragmentClassification
	 */
	probability: number;
	/**
	 *
	 * @type {string}
	 * @memberof TLPCodeFragmentClassification
	 */
	context: string;
	/**
	 *
	 * @type {string}
	 * @memberof TLPCodeFragmentClassification
	 */
	distribution?: string;
	/**
	 *
	 * @type {TLPCodeFragmentClassificationMetadata}
	 * @memberof TLPCodeFragmentClassification
	 */
	metadata?: TLPCodeFragmentClassificationMetadata;
	/**
	 * identifier for the user
	 * @type {string}
	 * @memberof TLPCodeFragmentClassification
	 */
	user: string;
	/**
	 * this is the time it takes to run this model.
	 * @type {number}
	 * @memberof TLPCodeFragmentClassification
	 */
	latency?: number;
	/**
	 *
	 * @type {SystemExecutionInformation}
	 * @memberof TLPCodeFragmentClassification
	 */
	system?: SystemExecutionInformation;
}

/**
 * Check if a given object implements the TLPCodeFragmentClassification interface.
 */
export function instanceOfTLPCodeFragmentClassification(
	value: object,
): boolean {
	let isInstance = true;
	isInstance = isInstance && "asset" in value;
	isInstance = isInstance && "model" in value;
	isInstance = isInstance && "created" in value;
	isInstance = isInstance && "classification" in value;
	isInstance = isInstance && "probability" in value;
	isInstance = isInstance && "context" in value;
	isInstance = isInstance && "user" in value;

	return isInstance;
}

export function TLPCodeFragmentClassificationFromJSON(
	json: any,
): TLPCodeFragmentClassification {
	return TLPCodeFragmentClassificationFromJSONTyped(json, false);
}

export function TLPCodeFragmentClassificationFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): TLPCodeFragmentClassification {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		asset: json["asset"],
		model: json["model"],
		created: json["created"],
		classification: json["classification"],
		probability: json["probability"],
		context: json["context"],
		distribution: exists(json, "distribution")
			? json["distribution"]
			: undefined,
		metadata: exists(json, "metadata")
			? TLPCodeFragmentClassificationMetadataFromJSON(json["metadata"])
			: undefined,
		user: json["user"],
		latency: exists(json, "latency") ? json["latency"] : undefined,
		system: exists(json, "system")
			? SystemExecutionInformationFromJSON(json["system"])
			: undefined,
	};
}

export function TLPCodeFragmentClassificationToJSON(
	value?: TLPCodeFragmentClassification | null,
): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		asset: value.asset,
		model: value.model,
		created: value.created,
		classification: value.classification,
		probability: value.probability,
		context: value.context,
		distribution: value.distribution,
		metadata: TLPCodeFragmentClassificationMetadataToJSON(value.metadata),
		user: value.user,
		latency: value.latency,
		system: SystemExecutionInformationToJSON(value.system),
	};
}
