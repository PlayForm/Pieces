/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import type { EmbeddedModelSchema } from "./EmbeddedModelSchema.tsx";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
} from "./EmbeddedModelSchema.tsx";

/**
 * A model representing a returnable response for a OAuthGroup Token
 * @export
 * @interface OAuthToken
 */
export interface OAuthToken {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof OAuthToken
	 */
	schema?: EmbeddedModelSchema;
	/**
	 * The Access Token
	 * @type {string}
	 * @memberof OAuthToken
	 */
	accessToken: string;
	/**
	 *
	 * @type {string}
	 * @memberof OAuthToken
	 */
	tokenType: OAuthTokenTokenTypeEnum;
	/**
	 *
	 * @type {number}
	 * @memberof OAuthToken
	 */
	expiresIn: number;
	/**
	 *
	 * @type {string}
	 * @memberof OAuthToken
	 */
	scope: string;
	/**
	 *
	 * @type {string}
	 * @memberof OAuthToken
	 */
	refreshToken?: string;
	/**
	 *
	 * @type {string}
	 * @memberof OAuthToken
	 */
	idToken?: string;
}

/**
 * @export
 */
export const OAuthTokenTokenTypeEnum = {
	Bearer: "Bearer",
} as const;
export type OAuthTokenTokenTypeEnum =
	(typeof OAuthTokenTokenTypeEnum)[keyof typeof OAuthTokenTokenTypeEnum];

/**
 * Check if a given object implements the OAuthToken interface.
 */
export function instanceOfOAuthToken(value: object): boolean {
	let isInstance = true;
	isInstance = isInstance && "accessToken" in value;
	isInstance = isInstance && "tokenType" in value;
	isInstance = isInstance && "expiresIn" in value;
	isInstance = isInstance && "scope" in value;

	return isInstance;
}

export function OAuthTokenFromJSON(json: any): OAuthToken {
	return OAuthTokenFromJSONTyped(json, false);
}

export function OAuthTokenFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): OAuthToken {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		accessToken: json["access_token"],
		tokenType: json["token_type"],
		expiresIn: json["expires_in"],
		scope: json["scope"],
		refreshToken: exists(json, "refresh_token")
			? json["refresh_token"]
			: undefined,
		idToken: exists(json, "id_token") ? json["id_token"] : undefined,
	};
}

export function OAuthTokenToJSON(value?: OAuthToken | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		access_token: value.accessToken,
		token_type: value.tokenType,
		expires_in: value.expiresIn,
		scope: value.scope,
		refresh_token: value.refreshToken,
		id_token: value.idToken,
	};
}
