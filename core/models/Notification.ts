/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
	type EmbeddedModelSchema,
} from "./EmbeddedModelSchema.tsx";

/**
 * config model for notification invoking
 * @export
 * @interface Notification
 */
export interface Notification {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof Notification
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {number}
	 * @memberof Notification
	 */
	id: number;
	/**
	 *
	 * @type {string}
	 * @memberof Notification
	 */
	title?: string;
	/**
	 *
	 * @type {string}
	 * @memberof Notification
	 */
	message?: string;
	/**
	 *
	 * @type {string}
	 * @memberof Notification
	 */
	payload?: string;
}

/**
 * Check if a given object implements the Notification interface.
 */
export function instanceOfNotification(value: object): boolean {
	let isInstance = true;
	isInstance = isInstance && "id" in value;

	return isInstance;
}

export function NotificationFromJSON(json: any): Notification {
	return NotificationFromJSONTyped(json, false);
}

export function NotificationFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): Notification {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		id: json["id"],
		title: exists(json, "title") ? json["title"] : undefined,
		message: exists(json, "message") ? json["message"] : undefined,
		payload: exists(json, "payload") ? json["payload"] : undefined,
	};
}

export function NotificationToJSON(value?: Notification | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		id: value.id,
		title: value.title,
		message: value.message,
		payload: value.payload,
	};
}
