/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import type { Applications } from "./Applications.tsx";
import { ApplicationsFromJSON, ApplicationsToJSON } from "./Applications.tsx";
import type { EmbeddedModelSchema } from "./EmbeddedModelSchema.tsx";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
} from "./EmbeddedModelSchema.tsx";
import type { FlattenedAnchors } from "./FlattenedAnchors.tsx";
import {
	FlattenedAnchorsFromJSON,
	FlattenedAnchorsToJSON,
} from "./FlattenedAnchors.tsx";
import type { FlattenedAssets } from "./FlattenedAssets.tsx";
import {
	FlattenedAssetsFromJSON,
	FlattenedAssetsToJSON,
} from "./FlattenedAssets.tsx";
import type { FlattenedConversations } from "./FlattenedConversations.tsx";
import {
	FlattenedConversationsFromJSON,
	FlattenedConversationsToJSON,
} from "./FlattenedConversations.tsx";
import type { FlattenedPersons } from "./FlattenedPersons.tsx";
import {
	FlattenedPersonsFromJSON,
	FlattenedPersonsToJSON,
} from "./FlattenedPersons.tsx";
import type { FlattenedRanges } from "./FlattenedRanges.tsx";
import {
	FlattenedRangesFromJSON,
	FlattenedRangesToJSON,
} from "./FlattenedRanges.tsx";
import type { FlattenedWebsites } from "./FlattenedWebsites.tsx";
import {
	FlattenedWebsitesFromJSON,
	FlattenedWebsitesToJSON,
} from "./FlattenedWebsites.tsx";
import type { FlattenedWorkstreamEvents } from "./FlattenedWorkstreamEvents.tsx";
import {
	FlattenedWorkstreamEventsFromJSON,
	FlattenedWorkstreamEventsToJSON,
} from "./FlattenedWorkstreamEvents.tsx";
import type { Model } from "./Model.tsx";
import { ModelFromJSON, ModelToJSON } from "./Model.tsx";
import type { SeededAnnotation } from "./SeededAnnotation.tsx";
import {
	SeededAnnotationFromJSON,
	SeededAnnotationToJSON,
} from "./SeededAnnotation.tsx";

/**
 * This is a seeded version of a WorkstreamSummary
 * @export
 * @interface SeededWorkstreamSummary
 */
export interface SeededWorkstreamSummary {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof SeededWorkstreamSummary
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {FlattenedWorkstreamEvents}
	 * @memberof SeededWorkstreamSummary
	 */
	events?: FlattenedWorkstreamEvents;
	/**
	 *
	 * @type {string}
	 * @memberof SeededWorkstreamSummary
	 */
	name: string;
	/**
	 *
	 * @type {Array<SeededAnnotation>}
	 * @memberof SeededWorkstreamSummary
	 */
	annotations?: SeededAnnotation[];
	/**
	 *
	 * @type {FlattenedRanges}
	 * @memberof SeededWorkstreamSummary
	 */
	ranges?: FlattenedRanges;
	/**
	 *
	 * @type {Model}
	 * @memberof SeededWorkstreamSummary
	 */
	model: Model;
	/**
	 *
	 * @type {FlattenedWebsites}
	 * @memberof SeededWorkstreamSummary
	 */
	websites?: FlattenedWebsites;
	/**
	 *
	 * @type {FlattenedAnchors}
	 * @memberof SeededWorkstreamSummary
	 */
	anchors?: FlattenedAnchors;
	/**
	 *
	 * @type {FlattenedAssets}
	 * @memberof SeededWorkstreamSummary
	 */
	assets?: FlattenedAssets;
	/**
	 *
	 * @type {FlattenedConversations}
	 * @memberof SeededWorkstreamSummary
	 */
	conversations?: FlattenedConversations;
	/**
	 *
	 * @type {FlattenedPersons}
	 * @memberof SeededWorkstreamSummary
	 */
	persons?: FlattenedPersons;
	/**
	 *
	 * @type {Applications}
	 * @memberof SeededWorkstreamSummary
	 */
	applications?: Applications;
}

/**
 * Check if a given object implements the SeededWorkstreamSummary interface.
 */
export function instanceOfSeededWorkstreamSummary(value: object): boolean {
	let isInstance = true;
	isInstance = isInstance && "name" in value;
	isInstance = isInstance && "model" in value;

	return isInstance;
}

export function SeededWorkstreamSummaryFromJSON(
	json: any,
): SeededWorkstreamSummary {
	return SeededWorkstreamSummaryFromJSONTyped(json, false);
}

export function SeededWorkstreamSummaryFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): SeededWorkstreamSummary {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		events: exists(json, "events")
			? FlattenedWorkstreamEventsFromJSON(json["events"])
			: undefined,
		name: json["name"],
		annotations: exists(json, "annotations")
			? (json["annotations"] as any[]).map(SeededAnnotationFromJSON)
			: undefined,
		ranges: exists(json, "ranges")
			? FlattenedRangesFromJSON(json["ranges"])
			: undefined,
		model: ModelFromJSON(json["model"]),
		websites: exists(json, "websites")
			? FlattenedWebsitesFromJSON(json["websites"])
			: undefined,
		anchors: exists(json, "anchors")
			? FlattenedAnchorsFromJSON(json["anchors"])
			: undefined,
		assets: exists(json, "assets")
			? FlattenedAssetsFromJSON(json["assets"])
			: undefined,
		conversations: exists(json, "conversations")
			? FlattenedConversationsFromJSON(json["conversations"])
			: undefined,
		persons: exists(json, "persons")
			? FlattenedPersonsFromJSON(json["persons"])
			: undefined,
		applications: exists(json, "applications")
			? ApplicationsFromJSON(json["applications"])
			: undefined,
	};
}

export function SeededWorkstreamSummaryToJSON(
	value?: SeededWorkstreamSummary | null,
): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		events: FlattenedWorkstreamEventsToJSON(value.events),
		name: value.name,
		annotations:
			value.annotations === undefined
				? undefined
				: (value.annotations as any[]).map(SeededAnnotationToJSON),
		ranges: FlattenedRangesToJSON(value.ranges),
		model: ModelToJSON(value.model),
		websites: FlattenedWebsitesToJSON(value.websites),
		anchors: FlattenedAnchorsToJSON(value.anchors),
		assets: FlattenedAssetsToJSON(value.assets),
		conversations: FlattenedConversationsToJSON(value.conversations),
		persons: FlattenedPersonsToJSON(value.persons),
		applications: ApplicationsToJSON(value.applications),
	};
}
