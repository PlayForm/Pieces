/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
	type EmbeddedModelSchema,
} from "./EmbeddedModelSchema.tsx";
import {
	ReferencedTagFromJSON,
	ReferencedTagToJSON,
	type ReferencedTag,
} from "./ReferencedTag.tsx";
import {
	ReferencedWebsiteFromJSON,
	ReferencedWebsiteToJSON,
	type ReferencedWebsite,
} from "./ReferencedWebsite.tsx";

/**
 * This is a shared input model for all the exists endpoints:
 * /tags/exists : if the tag exists you will have a defined tag:ReferencedTag, if not then it doesnt exist.
 * /websites/exists: if the url exists you will have a defined website:ReferencedWebsite, if not then it doesnt exist.
 * @export
 * @interface ExistingMetadata
 */
export interface ExistingMetadata {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof ExistingMetadata
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {ReferencedWebsite}
	 * @memberof ExistingMetadata
	 */
	website?: ReferencedWebsite;
	/**
	 *
	 * @type {ReferencedTag}
	 * @memberof ExistingMetadata
	 */
	tag?: ReferencedTag;
}

/**
 * Check if a given object implements the ExistingMetadata interface.
 */
export function instanceOfExistingMetadata(_value: object): boolean {
	const isInstance = true;

	return isInstance;
}

export function ExistingMetadataFromJSON(json: any): ExistingMetadata {
	return ExistingMetadataFromJSONTyped(json, false);
}

export function ExistingMetadataFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): ExistingMetadata {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		website: exists(json, "website")
			? ReferencedWebsiteFromJSON(json["website"])
			: undefined,
		tag: exists(json, "tag")
			? ReferencedTagFromJSON(json["tag"])
			: undefined,
	};
}

export function ExistingMetadataToJSON(value?: ExistingMetadata | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		website: ReferencedWebsiteToJSON(value.website),
		tag: ReferencedTagToJSON(value.tag),
	};
}
