/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
	type EmbeddedModelSchema,
} from "./EmbeddedModelSchema.tsx";
import {
	FlattenedConversationsFromJSON,
	FlattenedConversationsToJSON,
	type FlattenedConversations,
} from "./FlattenedConversations.tsx";
import {
	FlattenedWorkstreamSummariesFromJSON,
	FlattenedWorkstreamSummariesToJSON,
	type FlattenedWorkstreamSummaries,
} from "./FlattenedWorkstreamSummaries.tsx";
import {
	GroupedTimestampFromJSON,
	GroupedTimestampToJSON,
	type GroupedTimestamp,
} from "./GroupedTimestamp.tsx";
import { ScoreFromJSON, ScoreToJSON, type Score } from "./Score.tsx";

/**
 * This is a DAG-Safe minimal representation of a Range.
 * @export
 * @interface FlattenedRange
 */
export interface FlattenedRange {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof FlattenedRange
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {string}
	 * @memberof FlattenedRange
	 */
	id: string;
	/**
	 *
	 * @type {Score}
	 * @memberof FlattenedRange
	 */
	score?: Score;
	/**
	 *
	 * @type {GroupedTimestamp}
	 * @memberof FlattenedRange
	 */
	created: GroupedTimestamp;
	/**
	 *
	 * @type {GroupedTimestamp}
	 * @memberof FlattenedRange
	 */
	updated: GroupedTimestamp;
	/**
	 *
	 * @type {GroupedTimestamp}
	 * @memberof FlattenedRange
	 */
	to?: GroupedTimestamp;
	/**
	 *
	 * @type {GroupedTimestamp}
	 * @memberof FlattenedRange
	 */
	from?: GroupedTimestamp;
	/**
	 *
	 * @type {boolean}
	 * @memberof FlattenedRange
	 */
	between?: boolean;
	/**
	 *
	 * @type {FlattenedWorkstreamSummaries}
	 * @memberof FlattenedRange
	 */
	summaries?: FlattenedWorkstreamSummaries;
	/**
	 *
	 * @type {FlattenedConversations}
	 * @memberof FlattenedRange
	 */
	conversations?: FlattenedConversations;
}

/**
 * Check if a given object implements the FlattenedRange interface.
 */
export function instanceOfFlattenedRange(value: object): boolean {
	let isInstance = true;
	isInstance = isInstance && "id" in value;
	isInstance = isInstance && "created" in value;
	isInstance = isInstance && "updated" in value;

	return isInstance;
}

export function FlattenedRangeFromJSON(json: any): FlattenedRange {
	return FlattenedRangeFromJSONTyped(json, false);
}

export function FlattenedRangeFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): FlattenedRange {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		id: json["id"],
		score: exists(json, "score") ? ScoreFromJSON(json["score"]) : undefined,
		created: GroupedTimestampFromJSON(json["created"]),
		updated: GroupedTimestampFromJSON(json["updated"]),
		to: exists(json, "to")
			? GroupedTimestampFromJSON(json["to"])
			: undefined,
		from: exists(json, "from")
			? GroupedTimestampFromJSON(json["from"])
			: undefined,
		between: exists(json, "between") ? json["between"] : undefined,
		summaries: exists(json, "summaries")
			? FlattenedWorkstreamSummariesFromJSON(json["summaries"])
			: undefined,
		conversations: exists(json, "conversations")
			? FlattenedConversationsFromJSON(json["conversations"])
			: undefined,
	};
}

export function FlattenedRangeToJSON(value?: FlattenedRange | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		id: value.id,
		score: ScoreToJSON(value.score),
		created: GroupedTimestampToJSON(value.created),
		updated: GroupedTimestampToJSON(value.updated),
		to: GroupedTimestampToJSON(value.to),
		from: GroupedTimestampToJSON(value.from),
		between: value.between,
		summaries: FlattenedWorkstreamSummariesToJSON(value.summaries),
		conversations: FlattenedConversationsToJSON(value.conversations),
	};
}
