/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
	type EmbeddedModelSchema,
} from "./EmbeddedModelSchema.tsx";
import {
	FlattenedConversationMessagesFromJSON,
	FlattenedConversationMessagesToJSON,
	type FlattenedConversationMessages,
} from "./FlattenedConversationMessages.tsx";
import {
	TemporalRangeGroundingFromJSON,
	TemporalRangeGroundingToJSON,
	type TemporalRangeGrounding,
} from "./TemporalRangeGrounding.tsx";

/**
 * This is the context used for grounding the ml models with reguard to a conversation.
 * @export
 * @interface ConversationGrounding
 */
export interface ConversationGrounding {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof ConversationGrounding
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {FlattenedConversationMessages}
	 * @memberof ConversationGrounding
	 */
	messages?: FlattenedConversationMessages;
	/**
	 *
	 * @type {TemporalRangeGrounding}
	 * @memberof ConversationGrounding
	 */
	temporal?: TemporalRangeGrounding;
}

/**
 * Check if a given object implements the ConversationGrounding interface.
 */
export function instanceOfConversationGrounding(_value: object): boolean {
	const isInstance = true;

	return isInstance;
}

export function ConversationGroundingFromJSON(
	json: any,
): ConversationGrounding {
	return ConversationGroundingFromJSONTyped(json, false);
}

export function ConversationGroundingFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): ConversationGrounding {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		messages: exists(json, "messages")
			? FlattenedConversationMessagesFromJSON(json["messages"])
			: undefined,
		temporal: exists(json, "temporal")
			? TemporalRangeGroundingFromJSON(json["temporal"])
			: undefined,
	};
}

export function ConversationGroundingToJSON(
	value?: ConversationGrounding | null,
): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		messages: FlattenedConversationMessagesToJSON(value.messages),
		temporal: TemporalRangeGroundingToJSON(value.temporal),
	};
}
