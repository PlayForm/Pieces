/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import {
	Auth0IdentityFromJSON,
	Auth0IdentityToJSON,
	type Auth0Identity,
} from "./Auth0Identity.tsx";
import {
	Auth0UserMetadataFromJSON,
	Auth0UserMetadataToJSON,
	type Auth0UserMetadata,
} from "./Auth0UserMetadata.tsx";

/**
 *
 * @export
 * @interface Auth0User
 */
export interface Auth0User {
	/**
	 * 	User's full name.
	 * @type {string}
	 * @memberof Auth0User
	 */
	name?: string;
	/**
	 * mapped from picture.URL pointing to the user's profile picture.
	 * @type {string}
	 * @memberof Auth0User
	 */
	picture?: string;
	/**
	 *
	 * @type {string}
	 * @memberof Auth0User
	 */
	email?: string;
	/**
	 *
	 * @type {Date}
	 * @memberof Auth0User
	 */
	createdAt?: Date;
	/**
	 * Indicates whether the user has verified their email address. Mapped from email_verified -> emailVerified.
	 * @type {boolean}
	 * @memberof Auth0User
	 */
	emailVerified?: boolean;
	/**
	 * User's family name.
	 * @type {string}
	 * @memberof Auth0User
	 */
	familyName?: string;
	/**
	 * User's given name.
	 *
	 * @type {string}
	 * @memberof Auth0User
	 */
	givenName?: string;
	/**
	 * Contains info retrieved from the identity provider with which the user originally authenticates.
	 * @type {Array<Auth0Identity>}
	 * @memberof Auth0User
	 */
	identities?: Auth0Identity[];
	/**
	 * User's nickname.
	 *
	 * @type {string}
	 * @memberof Auth0User
	 */
	nickname?: string;
	/**
	 *
	 * @type {Date}
	 * @memberof Auth0User
	 */
	updatedAt?: Date;
	/**
	 * 	(unique) User's username.
	 *
	 * @type {string}
	 * @memberof Auth0User
	 */
	username?: string;
	/**
	 *
	 * @type {Auth0UserMetadata}
	 * @memberof Auth0User
	 */
	userMetadata?: Auth0UserMetadata;
	/**
	 *
	 * @type {string}
	 * @memberof Auth0User
	 */
	locale?: string;
	/**
	 *
	 * @type {string}
	 * @memberof Auth0User
	 */
	userId?: string;
	/**
	 *
	 * @type {string}
	 * @memberof Auth0User
	 */
	lastIp?: string;
	/**
	 *
	 * @type {Date}
	 * @memberof Auth0User
	 */
	lastLogin?: Date;
	/**
	 *
	 * @type {number}
	 * @memberof Auth0User
	 */
	loginsCount?: number;
	/**
	 *
	 * @type {Array<string>}
	 * @memberof Auth0User
	 */
	blockedFor?: string[];
	/**
	 *
	 * @type {Array<string>}
	 * @memberof Auth0User
	 */
	guardianAuthenticators?: string[];
}

/**
 * Check if a given object implements the Auth0User interface.
 */
export function instanceOfAuth0User(_value: object): boolean {
	const isInstance = true;

	return isInstance;
}

export function Auth0UserFromJSON(json: any): Auth0User {
	return Auth0UserFromJSONTyped(json, false);
}

export function Auth0UserFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): Auth0User {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		name: exists(json, "name") ? json["name"] : undefined,
		picture: exists(json, "picture") ? json["picture"] : undefined,
		email: exists(json, "email") ? json["email"] : undefined,
		createdAt: exists(json, "created_at")
			? new Date(json["created_at"])
			: undefined,
		emailVerified: exists(json, "email_verified")
			? json["email_verified"]
			: undefined,
		familyName: exists(json, "family_name")
			? json["family_name"]
			: undefined,
		givenName: exists(json, "given_name") ? json["given_name"] : undefined,
		identities: exists(json, "identities")
			? (json["identities"] as any[]).map(Auth0IdentityFromJSON)
			: undefined,
		nickname: exists(json, "nickname") ? json["nickname"] : undefined,
		updatedAt: exists(json, "updated_at")
			? new Date(json["updated_at"])
			: undefined,
		username: exists(json, "username") ? json["username"] : undefined,
		userMetadata: exists(json, "user_metadata")
			? Auth0UserMetadataFromJSON(json["user_metadata"])
			: undefined,
		locale: exists(json, "locale") ? json["locale"] : undefined,
		userId: exists(json, "user_id") ? json["user_id"] : undefined,
		lastIp: exists(json, "last_ip") ? json["last_ip"] : undefined,
		lastLogin: exists(json, "last_login")
			? new Date(json["last_login"])
			: undefined,
		loginsCount: exists(json, "logins_count")
			? json["logins_count"]
			: undefined,
		blockedFor: exists(json, "blocked_for")
			? json["blocked_for"]
			: undefined,
		guardianAuthenticators: exists(json, "guardian_authenticators")
			? json["guardian_authenticators"]
			: undefined,
	};
}

export function Auth0UserToJSON(value?: Auth0User | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		name: value.name,
		picture: value.picture,
		email: value.email,
		created_at:
			value.createdAt === undefined
				? undefined
				: value.createdAt.toISOString(),
		email_verified: value.emailVerified,
		family_name: value.familyName,
		given_name: value.givenName,
		identities:
			value.identities === undefined
				? undefined
				: (value.identities as any[]).map(Auth0IdentityToJSON),
		nickname: value.nickname,
		updated_at:
			value.updatedAt === undefined
				? undefined
				: value.updatedAt.toISOString(),
		username: value.username,
		user_metadata: Auth0UserMetadataToJSON(value.userMetadata),
		locale: value.locale,
		user_id: value.userId,
		last_ip: value.lastIp,
		last_login:
			value.lastLogin === undefined
				? undefined
				: value.lastLogin.toISOString(),
		logins_count: value.loginsCount,
		blocked_for: value.blockedFor,
		guardian_authenticators: value.guardianAuthenticators,
	};
}
