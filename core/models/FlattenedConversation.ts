/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import {
	ApplicationFromJSON,
	ApplicationToJSON,
	type Application,
} from "./Application.tsx";
import {
	ConversationGroundingFromJSON,
	ConversationGroundingToJSON,
	type ConversationGrounding,
} from "./ConversationGrounding.tsx";
import {
	ConversationTypeEnumFromJSON,
	ConversationTypeEnumToJSON,
	type ConversationTypeEnum,
} from "./ConversationTypeEnum.tsx";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
	type EmbeddedModelSchema,
} from "./EmbeddedModelSchema.tsx";
import {
	FlattenedAnchorsFromJSON,
	FlattenedAnchorsToJSON,
	type FlattenedAnchors,
} from "./FlattenedAnchors.tsx";
import {
	FlattenedAnnotationsFromJSON,
	FlattenedAnnotationsToJSON,
	type FlattenedAnnotations,
} from "./FlattenedAnnotations.tsx";
import {
	FlattenedAssetsFromJSON,
	FlattenedAssetsToJSON,
	type FlattenedAssets,
} from "./FlattenedAssets.tsx";
import {
	FlattenedConversationMessagesFromJSON,
	FlattenedConversationMessagesToJSON,
	type FlattenedConversationMessages,
} from "./FlattenedConversationMessages.tsx";
import {
	FlattenedWebsitesFromJSON,
	FlattenedWebsitesToJSON,
	type FlattenedWebsites,
} from "./FlattenedWebsites.tsx";
import {
	FlattenedWorkstreamSummariesFromJSON,
	FlattenedWorkstreamSummariesToJSON,
	type FlattenedWorkstreamSummaries,
} from "./FlattenedWorkstreamSummaries.tsx";
import {
	GroupedTimestampFromJSON,
	GroupedTimestampToJSON,
	type GroupedTimestamp,
} from "./GroupedTimestamp.tsx";
import {
	QGPTPromptPipelineFromJSON,
	QGPTPromptPipelineToJSON,
	type QGPTPromptPipeline,
} from "./QGPTPromptPipeline.tsx";
import {
	ReferencedModelFromJSON,
	ReferencedModelToJSON,
	type ReferencedModel,
} from "./ReferencedModel.tsx";
import { ScoreFromJSON, ScoreToJSON, type Score } from "./Score.tsx";

/**
 * This is a flattend version of the Convsersation for DAG-Safety.
 *
 * This will hold together a conversation. Ie allthe message within a conversation.
 *
 * All the additional properties on here used on here like(anchors/assets) are used for context that will seed the conversation.
 *
 * model is a calculated property, and will be the model of the last message sent if applicable.
 *
 * summaries: on the top level here will simply be used to associate a conversation and a summary(this is not used for grounding), grounding.summaries will be used for this.(TODO)
 * @export
 * @interface FlattenedConversation
 */
export interface FlattenedConversation {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof FlattenedConversation
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {string}
	 * @memberof FlattenedConversation
	 */
	id: string;
	/**
	 * This is a name that is customized.
	 * @type {string}
	 * @memberof FlattenedConversation
	 */
	name?: string;
	/**
	 *
	 * @type {GroupedTimestamp}
	 * @memberof FlattenedConversation
	 */
	created: GroupedTimestamp;
	/**
	 *
	 * @type {GroupedTimestamp}
	 * @memberof FlattenedConversation
	 */
	updated: GroupedTimestamp;
	/**
	 *
	 * @type {GroupedTimestamp}
	 * @memberof FlattenedConversation
	 */
	deleted?: GroupedTimestamp;
	/**
	 *
	 * @type {boolean}
	 * @memberof FlattenedConversation
	 */
	favorited?: boolean;
	/**
	 *
	 * @type {Application}
	 * @memberof FlattenedConversation
	 */
	application?: Application;
	/**
	 *
	 * @type {FlattenedAnnotations}
	 * @memberof FlattenedConversation
	 */
	annotations?: FlattenedAnnotations;
	/**
	 *
	 * @type {FlattenedConversationMessages}
	 * @memberof FlattenedConversation
	 */
	messages: FlattenedConversationMessages;
	/**
	 *
	 * @type {ReferencedModel}
	 * @memberof FlattenedConversation
	 */
	model?: ReferencedModel;
	/**
	 *
	 * @type {FlattenedAssets}
	 * @memberof FlattenedConversation
	 */
	assets?: FlattenedAssets;
	/**
	 *
	 * @type {FlattenedWebsites}
	 * @memberof FlattenedConversation
	 */
	websites?: FlattenedWebsites;
	/**
	 *
	 * @type {FlattenedAnchors}
	 * @memberof FlattenedConversation
	 */
	anchors?: FlattenedAnchors;
	/**
	 *
	 * @type {ConversationTypeEnum}
	 * @memberof FlattenedConversation
	 */
	type: ConversationTypeEnum;
	/**
	 *
	 * @type {ConversationGrounding}
	 * @memberof FlattenedConversation
	 */
	grounding?: ConversationGrounding;
	/**
	 *
	 * @type {Score}
	 * @memberof FlattenedConversation
	 */
	score?: Score;
	/**
	 *
	 * @type {QGPTPromptPipeline}
	 * @memberof FlattenedConversation
	 */
	pipeline?: QGPTPromptPipeline;
	/**
	 * This will let us know if this conversation was generated as a 'demo' conversation
	 * @type {boolean}
	 * @memberof FlattenedConversation
	 */
	demo?: boolean;
	/**
	 *
	 * @type {FlattenedWorkstreamSummaries}
	 * @memberof FlattenedConversation
	 */
	summaries?: FlattenedWorkstreamSummaries;
}

/**
 * Check if a given object implements the FlattenedConversation interface.
 */
export function instanceOfFlattenedConversation(value: object): boolean {
	let isInstance = true;
	isInstance = isInstance && "id" in value;
	isInstance = isInstance && "created" in value;
	isInstance = isInstance && "updated" in value;
	isInstance = isInstance && "messages" in value;
	isInstance = isInstance && "type" in value;

	return isInstance;
}

export function FlattenedConversationFromJSON(
	json: any,
): FlattenedConversation {
	return FlattenedConversationFromJSONTyped(json, false);
}

export function FlattenedConversationFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): FlattenedConversation {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		id: json["id"],
		name: exists(json, "name") ? json["name"] : undefined,
		created: GroupedTimestampFromJSON(json["created"]),
		updated: GroupedTimestampFromJSON(json["updated"]),
		deleted: exists(json, "deleted")
			? GroupedTimestampFromJSON(json["deleted"])
			: undefined,
		favorited: exists(json, "favorited") ? json["favorited"] : undefined,
		application: exists(json, "application")
			? ApplicationFromJSON(json["application"])
			: undefined,
		annotations: exists(json, "annotations")
			? FlattenedAnnotationsFromJSON(json["annotations"])
			: undefined,
		messages: FlattenedConversationMessagesFromJSON(json["messages"]),
		model: exists(json, "model")
			? ReferencedModelFromJSON(json["model"])
			: undefined,
		assets: exists(json, "assets")
			? FlattenedAssetsFromJSON(json["assets"])
			: undefined,
		websites: exists(json, "websites")
			? FlattenedWebsitesFromJSON(json["websites"])
			: undefined,
		anchors: exists(json, "anchors")
			? FlattenedAnchorsFromJSON(json["anchors"])
			: undefined,
		type: ConversationTypeEnumFromJSON(json["type"]),
		grounding: exists(json, "grounding")
			? ConversationGroundingFromJSON(json["grounding"])
			: undefined,
		score: exists(json, "score") ? ScoreFromJSON(json["score"]) : undefined,
		pipeline: exists(json, "pipeline")
			? QGPTPromptPipelineFromJSON(json["pipeline"])
			: undefined,
		demo: exists(json, "demo") ? json["demo"] : undefined,
		summaries: exists(json, "summaries")
			? FlattenedWorkstreamSummariesFromJSON(json["summaries"])
			: undefined,
	};
}

export function FlattenedConversationToJSON(
	value?: FlattenedConversation | null,
): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		id: value.id,
		name: value.name,
		created: GroupedTimestampToJSON(value.created),
		updated: GroupedTimestampToJSON(value.updated),
		deleted: GroupedTimestampToJSON(value.deleted),
		favorited: value.favorited,
		application: ApplicationToJSON(value.application),
		annotations: FlattenedAnnotationsToJSON(value.annotations),
		messages: FlattenedConversationMessagesToJSON(value.messages),
		model: ReferencedModelToJSON(value.model),
		assets: FlattenedAssetsToJSON(value.assets),
		websites: FlattenedWebsitesToJSON(value.websites),
		anchors: FlattenedAnchorsToJSON(value.anchors),
		type: ConversationTypeEnumToJSON(value.type),
		grounding: ConversationGroundingToJSON(value.grounding),
		score: ScoreToJSON(value.score),
		pipeline: QGPTPromptPipelineToJSON(value.pipeline),
		demo: value.demo,
		summaries: FlattenedWorkstreamSummariesToJSON(value.summaries),
	};
}
