/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import {
	CodeAnalysisFromJSON,
	CodeAnalysisToJSON,
	type CodeAnalysis,
} from "./CodeAnalysis.tsx";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
	type EmbeddedModelSchema,
} from "./EmbeddedModelSchema.tsx";
import {
	FlattenedImageAnalysisFromJSON,
	FlattenedImageAnalysisToJSON,
	type FlattenedImageAnalysis,
} from "./FlattenedImageAnalysis.tsx";

/**
 *
 * @export
 * @interface FlattenedAnalysis
 */
export interface FlattenedAnalysis {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof FlattenedAnalysis
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {CodeAnalysis}
	 * @memberof FlattenedAnalysis
	 */
	code?: CodeAnalysis;
	/**
	 *
	 * @type {string}
	 * @memberof FlattenedAnalysis
	 */
	id: string;
	/**
	 * this is a reference to the format that it belongs too.
	 * @type {string}
	 * @memberof FlattenedAnalysis
	 */
	format: string;
	/**
	 *
	 * @type {FlattenedImageAnalysis}
	 * @memberof FlattenedAnalysis
	 */
	image?: FlattenedImageAnalysis;
}

/**
 * Check if a given object implements the FlattenedAnalysis interface.
 */
export function instanceOfFlattenedAnalysis(value: object): boolean {
	let isInstance = true;
	isInstance = isInstance && "id" in value;
	isInstance = isInstance && "format" in value;

	return isInstance;
}

export function FlattenedAnalysisFromJSON(json: any): FlattenedAnalysis {
	return FlattenedAnalysisFromJSONTyped(json, false);
}

export function FlattenedAnalysisFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): FlattenedAnalysis {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		code: exists(json, "code")
			? CodeAnalysisFromJSON(json["code"])
			: undefined,
		id: json["id"],
		format: json["format"],
		image: exists(json, "image")
			? FlattenedImageAnalysisFromJSON(json["image"])
			: undefined,
	};
}

export function FlattenedAnalysisToJSON(value?: FlattenedAnalysis | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		code: CodeAnalysisToJSON(value.code),
		id: value.id,
		format: value.format,
		image: FlattenedImageAnalysisToJSON(value.image),
	};
}
