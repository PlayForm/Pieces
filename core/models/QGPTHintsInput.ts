/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import {
	QGPTQuestionAnswerFromJSON,
	QGPTQuestionAnswerToJSON,
	type QGPTQuestionAnswer,
} from "./QGPTQuestionAnswer.tsx";
import {
	RelevantQGPTSeedsFromJSON,
	RelevantQGPTSeedsToJSON,
	type RelevantQGPTSeeds,
} from "./RelevantQGPTSeeds.tsx";

/**
 * Query is your hints question.
 * Relevant is the relevant snippets.
 * Answer is the previous answer.(that we are asking a hint up for.)
 *
 * Query and Answer are both optional here because, you may pass over relevant snippets over ahead of hand if you already have them to answer your questions.
 * @export
 * @interface QGPTHintsInput
 */
export interface QGPTHintsInput {
	/**
	 *
	 * @type {string}
	 * @memberof QGPTHintsInput
	 */
	query?: string;
	/**
	 *
	 * @type {QGPTQuestionAnswer}
	 * @memberof QGPTHintsInput
	 */
	answer?: QGPTQuestionAnswer;
	/**
	 *
	 * @type {RelevantQGPTSeeds}
	 * @memberof QGPTHintsInput
	 */
	relevant: RelevantQGPTSeeds;
	/**
	 * optional application id
	 * @type {string}
	 * @memberof QGPTHintsInput
	 */
	application?: string;
	/**
	 * optional model id
	 * @type {string}
	 * @memberof QGPTHintsInput
	 */
	model?: string;
}

/**
 * Check if a given object implements the QGPTHintsInput interface.
 */
export function instanceOfQGPTHintsInput(value: object): boolean {
	let isInstance = true;
	isInstance = isInstance && "relevant" in value;

	return isInstance;
}

export function QGPTHintsInputFromJSON(json: any): QGPTHintsInput {
	return QGPTHintsInputFromJSONTyped(json, false);
}

export function QGPTHintsInputFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): QGPTHintsInput {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		query: exists(json, "query") ? json["query"] : undefined,
		answer: exists(json, "answer")
			? QGPTQuestionAnswerFromJSON(json["answer"])
			: undefined,
		relevant: RelevantQGPTSeedsFromJSON(json["relevant"]),
		application: exists(json, "application")
			? json["application"]
			: undefined,
		model: exists(json, "model") ? json["model"] : undefined,
	};
}

export function QGPTHintsInputToJSON(value?: QGPTHintsInput | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		query: value.query,
		answer: QGPTQuestionAnswerToJSON(value.answer),
		relevant: RelevantQGPTSeedsToJSON(value.relevant),
		application: value.application,
		model: value.model,
	};
}
