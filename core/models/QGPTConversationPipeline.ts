/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime.ts";
import {
	EmbeddedModelSchemaFromJSON,
	EmbeddedModelSchemaToJSON,
	type EmbeddedModelSchema,
} from "./EmbeddedModelSchema.tsx";
import {
	QGPTConversationPipelineForContextualizedCodeDialogFromJSON,
	QGPTConversationPipelineForContextualizedCodeDialogToJSON,
	type QGPTConversationPipelineForContextualizedCodeDialog,
} from "./QGPTConversationPipelineForContextualizedCodeDialog.tsx";
import {
	QGPTConversationPipelineForContextualizedCodeGenerationFromJSON,
	QGPTConversationPipelineForContextualizedCodeGenerationToJSON,
	type QGPTConversationPipelineForContextualizedCodeGeneration,
} from "./QGPTConversationPipelineForContextualizedCodeGeneration.tsx";
import {
	QGPTConversationPipelineForContextualizedCodeWorkstreamDialogFromJSON,
	QGPTConversationPipelineForContextualizedCodeWorkstreamDialogToJSON,
	type QGPTConversationPipelineForContextualizedCodeWorkstreamDialog,
} from "./QGPTConversationPipelineForContextualizedCodeWorkstreamDialog.tsx";
import {
	QGPTConversationPipelineForGeneralizedCodeDialogFromJSON,
	QGPTConversationPipelineForGeneralizedCodeDialogToJSON,
	type QGPTConversationPipelineForGeneralizedCodeDialog,
} from "./QGPTConversationPipelineForGeneralizedCodeDialog.tsx";

/**
 * This model is specifically for QGPT Conversation pipelines, the model is used to group conversational prompts for instance a conversation around generating code.
 *
 * here are some use cases-
 * 1. contextualized_code_generation- This is for users that want to have conversations around generating code, when there is provided context.
 * 2. generalized_code- This is for users that want to have conversations without context around code.
 * 3. contextualized_code- This is for users that want to have conversation around code with Context.
 * 4. contextualized_code_workstream: this is for the users that want to use context as well as WPE information in their chat (we wiil prioritize WPE infomration, but also support other info as well)
 * @export
 * @interface QGPTConversationPipeline
 */
export interface QGPTConversationPipeline {
	/**
	 *
	 * @type {EmbeddedModelSchema}
	 * @memberof QGPTConversationPipeline
	 */
	schema?: EmbeddedModelSchema;
	/**
	 *
	 * @type {QGPTConversationPipelineForContextualizedCodeGeneration}
	 * @memberof QGPTConversationPipeline
	 */
	contextualizedCodeGeneration?: QGPTConversationPipelineForContextualizedCodeGeneration;
	/**
	 *
	 * @type {QGPTConversationPipelineForGeneralizedCodeDialog}
	 * @memberof QGPTConversationPipeline
	 */
	generalizedCodeDialog?: QGPTConversationPipelineForGeneralizedCodeDialog;
	/**
	 *
	 * @type {QGPTConversationPipelineForContextualizedCodeDialog}
	 * @memberof QGPTConversationPipeline
	 */
	contextualizedCodeDialog?: QGPTConversationPipelineForContextualizedCodeDialog;
	/**
	 *
	 * @type {QGPTConversationPipelineForContextualizedCodeWorkstreamDialog}
	 * @memberof QGPTConversationPipeline
	 */
	contextualizedCodeWorkstreamDialog?: QGPTConversationPipelineForContextualizedCodeWorkstreamDialog;
}

/**
 * Check if a given object implements the QGPTConversationPipeline interface.
 */
export function instanceOfQGPTConversationPipeline(_value: object): boolean {
	const isInstance = true;

	return isInstance;
}

export function QGPTConversationPipelineFromJSON(
	json: any,
): QGPTConversationPipeline {
	return QGPTConversationPipelineFromJSONTyped(json, false);
}

export function QGPTConversationPipelineFromJSONTyped(
	json: any,
	_ignoreDiscriminator: boolean,
): QGPTConversationPipeline {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		schema: exists(json, "schema")
			? EmbeddedModelSchemaFromJSON(json["schema"])
			: undefined,
		contextualizedCodeGeneration: exists(
			json,
			"contextualized_code_generation",
		)
			? QGPTConversationPipelineForContextualizedCodeGenerationFromJSON(
					json["contextualized_code_generation"],
				)
			: undefined,
		generalizedCodeDialog: exists(json, "generalized_code_dialog")
			? QGPTConversationPipelineForGeneralizedCodeDialogFromJSON(
					json["generalized_code_dialog"],
				)
			: undefined,
		contextualizedCodeDialog: exists(json, "contextualized_code_dialog")
			? QGPTConversationPipelineForContextualizedCodeDialogFromJSON(
					json["contextualized_code_dialog"],
				)
			: undefined,
		contextualizedCodeWorkstreamDialog: exists(
			json,
			"contextualized_code_workstream_dialog",
		)
			? QGPTConversationPipelineForContextualizedCodeWorkstreamDialogFromJSON(
					json["contextualized_code_workstream_dialog"],
				)
			: undefined,
	};
}

export function QGPTConversationPipelineToJSON(
	value?: QGPTConversationPipeline | null,
): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		schema: EmbeddedModelSchemaToJSON(value.schema),
		contextualized_code_generation:
			QGPTConversationPipelineForContextualizedCodeGenerationToJSON(
				value.contextualizedCodeGeneration,
			),
		generalized_code_dialog:
			QGPTConversationPipelineForGeneralizedCodeDialogToJSON(
				value.generalizedCodeDialog,
			),
		contextualized_code_dialog:
			QGPTConversationPipelineForContextualizedCodeDialogToJSON(
				value.contextualizedCodeDialog,
			),
		contextualized_code_workstream_dialog:
			QGPTConversationPipelineForContextualizedCodeWorkstreamDialogToJSON(
				value.contextualizedCodeWorkstreamDialog,
			),
	};
}
